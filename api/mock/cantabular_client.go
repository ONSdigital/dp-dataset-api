// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-dataset-api/api"
	"sync"
)

// Ensure, that CantabularClientMock does implement api.CantabularClient.
// If this is not the case, regenerate this file with moq.
var _ api.CantabularClient = &CantabularClientMock{}

// CantabularClientMock is a mock implementation of api.CantabularClient.
//
// 	func TestSomethingThatUsesCantabularClient(t *testing.T) {
//
// 		// make and configure a mocked api.CantabularClient
// 		mockedCantabularClient := &CantabularClientMock{
// 			ListDatasetsFunc: func(ctx context.Context) ([]string, error) {
// 				panic("mock out the ListDatasets method")
// 			},
// 		}
//
// 		// use mockedCantabularClient in code that requires api.CantabularClient
// 		// and then make assertions.
//
// 	}
type CantabularClientMock struct {
	// ListDatasetsFunc mocks the ListDatasets method.
	ListDatasetsFunc func(ctx context.Context) ([]string, error)

	// calls tracks calls to the methods.
	calls struct {
		// ListDatasets holds details about calls to the ListDatasets method.
		ListDatasets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockListDatasets sync.RWMutex
}

// ListDatasets calls ListDatasetsFunc.
func (mock *CantabularClientMock) ListDatasets(ctx context.Context) ([]string, error) {
	if mock.ListDatasetsFunc == nil {
		panic("CantabularClientMock.ListDatasetsFunc: method is nil but CantabularClient.ListDatasets was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListDatasets.Lock()
	mock.calls.ListDatasets = append(mock.calls.ListDatasets, callInfo)
	mock.lockListDatasets.Unlock()
	return mock.ListDatasetsFunc(ctx)
}

// ListDatasetsCalls gets all the calls that were made to ListDatasets.
// Check the length with:
//     len(mockedCantabularClient.ListDatasetsCalls())
func (mock *CantabularClientMock) ListDatasetsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListDatasets.RLock()
	calls = mock.calls.ListDatasets
	mock.lockListDatasets.RUnlock()
	return calls
}
