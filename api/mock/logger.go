// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-dataset-api/api"
	"sync"
)

// Ensure, that LoggerMock does implement api.Logger.
// If this is not the case, regenerate this file with moq.
var _ api.Logger = &LoggerMock{}

// LoggerMock is a mock implementation of api.Logger.
//
// 	func TestSomethingThatUsesLogger(t *testing.T) {
//
// 		// make and configure a mocked api.Logger
// 		mockedLogger := &LoggerMock{
// 			ErrorFunc: func(ctx context.Context, event string, err error)  {
// 				panic("mock out the Error method")
// 			},
// 		}
//
// 		// use mockedLogger in code that requires api.Logger
// 		// and then make assertions.
//
// 	}
type LoggerMock struct {
	// ErrorFunc mocks the Error method.
	ErrorFunc func(ctx context.Context, event string, err error)

	// calls tracks calls to the methods.
	calls struct {
		// Error holds details about calls to the Error method.
		Error []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Event is the event argument value.
			Event string
			// Err is the err argument value.
			Err error
		}
	}
	lockError sync.RWMutex
}

// Error calls ErrorFunc.
func (mock *LoggerMock) Error(ctx context.Context, event string, err error) {
	if mock.ErrorFunc == nil {
		panic("LoggerMock.ErrorFunc: method is nil but Logger.Error was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Event string
		Err   error
	}{
		Ctx:   ctx,
		Event: event,
		Err:   err,
	}
	mock.lockError.Lock()
	mock.calls.Error = append(mock.calls.Error, callInfo)
	mock.lockError.Unlock()
	mock.ErrorFunc(ctx, event, err)
}

// ErrorCalls gets all the calls that were made to Error.
// Check the length with:
//     len(mockedLogger.ErrorCalls())
func (mock *LoggerMock) ErrorCalls() []struct {
	Ctx   context.Context
	Event string
	Err   error
} {
	var calls []struct {
		Ctx   context.Context
		Event string
		Err   error
	}
	mock.lockError.RLock()
	calls = mock.calls.Error
	mock.lockError.RUnlock()
	return calls
}
