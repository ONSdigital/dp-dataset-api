// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storetest

import (
	"context"
	"github.com/ONSdigital/dp-dataset-api/models"
	"github.com/ONSdigital/dp-dataset-api/store"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"sync"
)

// Ensure, that CantabularMock does implement store.Cantabular.
// If this is not the case, regenerate this file with moq.
var _ store.Cantabular = &CantabularMock{}

// CantabularMock is a mock implementation of store.Cantabular.
//
// 	func TestSomethingThatUsesCantabular(t *testing.T) {
//
// 		// make and configure a mocked store.Cantabular
// 		mockedCantabular := &CantabularMock{
// 			BlobsFunc: func(ctx context.Context) ([]models.Blob, error) {
// 				panic("mock out the Blobs method")
// 			},
// 			CheckerFunc: func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 		}
//
// 		// use mockedCantabular in code that requires store.Cantabular
// 		// and then make assertions.
//
// 	}
type CantabularMock struct {
	// BlobsFunc mocks the Blobs method.
	BlobsFunc func(ctx context.Context) ([]models.Blob, error)

	// CheckerFunc mocks the Checker method.
	CheckerFunc func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error

	// calls tracks calls to the methods.
	calls struct {
		// Blobs holds details about calls to the Blobs method.
		Blobs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CheckState is the checkState argument value.
			CheckState *healthcheck.CheckState
		}
	}
	lockBlobs   sync.RWMutex
	lockChecker sync.RWMutex
}

// Blobs calls BlobsFunc.
func (mock *CantabularMock) Blobs(ctx context.Context) ([]models.Blob, error) {
	if mock.BlobsFunc == nil {
		panic("CantabularMock.BlobsFunc: method is nil but Cantabular.Blobs was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockBlobs.Lock()
	mock.calls.Blobs = append(mock.calls.Blobs, callInfo)
	mock.lockBlobs.Unlock()
	return mock.BlobsFunc(ctx)
}

// BlobsCalls gets all the calls that were made to Blobs.
// Check the length with:
//     len(mockedCantabular.BlobsCalls())
func (mock *CantabularMock) BlobsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockBlobs.RLock()
	calls = mock.calls.Blobs
	mock.lockBlobs.RUnlock()
	return calls
}

// Checker calls CheckerFunc.
func (mock *CantabularMock) Checker(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("CantabularMock.CheckerFunc: method is nil but Cantabular.Checker was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}{
		ContextMoqParam: contextMoqParam,
		CheckState:      checkState,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(contextMoqParam, checkState)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedCantabular.CheckerCalls())
func (mock *CantabularMock) CheckerCalls() []struct {
	ContextMoqParam context.Context
	CheckState      *healthcheck.CheckState
} {
	var calls []struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}
