// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storetest

import (
	"context"
	"github.com/ONSdigital/dp-dataset-api/store"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"sync"
)

// Ensure, that GraphDBMock does implement store.GraphDB.
// If this is not the case, regenerate this file with moq.
var _ store.GraphDB = &GraphDBMock{}

// GraphDBMock is a mock implementation of store.GraphDB.
//
// 	func TestSomethingThatUsesGraphDB(t *testing.T) {
//
// 		// make and configure a mocked store.GraphDB
// 		mockedGraphDB := &GraphDBMock{
// 			AddVersionDetailsToInstanceFunc: func(ctx context.Context, instanceID string, datasetID string, edition string, version int) error {
// 				panic("mock out the AddVersionDetailsToInstance method")
// 			},
// 			CheckerFunc: func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			CloseFunc: func(ctx context.Context) error {
// 				panic("mock out the Close method")
// 			},
// 			SetInstanceIsPublishedFunc: func(ctx context.Context, instanceID string) error {
// 				panic("mock out the SetInstanceIsPublished method")
// 			},
// 		}
//
// 		// use mockedGraphDB in code that requires store.GraphDB
// 		// and then make assertions.
//
// 	}
type GraphDBMock struct {
	// AddVersionDetailsToInstanceFunc mocks the AddVersionDetailsToInstance method.
	AddVersionDetailsToInstanceFunc func(ctx context.Context, instanceID string, datasetID string, edition string, version int) error

	// CheckerFunc mocks the Checker method.
	CheckerFunc func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// SetInstanceIsPublishedFunc mocks the SetInstanceIsPublished method.
	SetInstanceIsPublishedFunc func(ctx context.Context, instanceID string) error

	// calls tracks calls to the methods.
	calls struct {
		// AddVersionDetailsToInstance holds details about calls to the AddVersionDetailsToInstance method.
		AddVersionDetailsToInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// DatasetID is the datasetID argument value.
			DatasetID string
			// Edition is the edition argument value.
			Edition string
			// Version is the version argument value.
			Version int
		}
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CheckState is the checkState argument value.
			CheckState *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// SetInstanceIsPublished holds details about calls to the SetInstanceIsPublished method.
		SetInstanceIsPublished []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
		}
	}
	lockAddVersionDetailsToInstance sync.RWMutex
	lockChecker                     sync.RWMutex
	lockClose                       sync.RWMutex
	lockSetInstanceIsPublished      sync.RWMutex
}

// AddVersionDetailsToInstance calls AddVersionDetailsToInstanceFunc.
func (mock *GraphDBMock) AddVersionDetailsToInstance(ctx context.Context, instanceID string, datasetID string, edition string, version int) error {
	if mock.AddVersionDetailsToInstanceFunc == nil {
		panic("GraphDBMock.AddVersionDetailsToInstanceFunc: method is nil but GraphDB.AddVersionDetailsToInstance was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
		DatasetID  string
		Edition    string
		Version    int
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
		DatasetID:  datasetID,
		Edition:    edition,
		Version:    version,
	}
	mock.lockAddVersionDetailsToInstance.Lock()
	mock.calls.AddVersionDetailsToInstance = append(mock.calls.AddVersionDetailsToInstance, callInfo)
	mock.lockAddVersionDetailsToInstance.Unlock()
	return mock.AddVersionDetailsToInstanceFunc(ctx, instanceID, datasetID, edition, version)
}

// AddVersionDetailsToInstanceCalls gets all the calls that were made to AddVersionDetailsToInstance.
// Check the length with:
//     len(mockedGraphDB.AddVersionDetailsToInstanceCalls())
func (mock *GraphDBMock) AddVersionDetailsToInstanceCalls() []struct {
	Ctx        context.Context
	InstanceID string
	DatasetID  string
	Edition    string
	Version    int
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
		DatasetID  string
		Edition    string
		Version    int
	}
	mock.lockAddVersionDetailsToInstance.RLock()
	calls = mock.calls.AddVersionDetailsToInstance
	mock.lockAddVersionDetailsToInstance.RUnlock()
	return calls
}

// Checker calls CheckerFunc.
func (mock *GraphDBMock) Checker(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("GraphDBMock.CheckerFunc: method is nil but GraphDB.Checker was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}{
		ContextMoqParam: contextMoqParam,
		CheckState:      checkState,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(contextMoqParam, checkState)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedGraphDB.CheckerCalls())
func (mock *GraphDBMock) CheckerCalls() []struct {
	ContextMoqParam context.Context
	CheckState      *healthcheck.CheckState
} {
	var calls []struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *GraphDBMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("GraphDBMock.CloseFunc: method is nil but GraphDB.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedGraphDB.CloseCalls())
func (mock *GraphDBMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// SetInstanceIsPublished calls SetInstanceIsPublishedFunc.
func (mock *GraphDBMock) SetInstanceIsPublished(ctx context.Context, instanceID string) error {
	if mock.SetInstanceIsPublishedFunc == nil {
		panic("GraphDBMock.SetInstanceIsPublishedFunc: method is nil but GraphDB.SetInstanceIsPublished was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
	}
	mock.lockSetInstanceIsPublished.Lock()
	mock.calls.SetInstanceIsPublished = append(mock.calls.SetInstanceIsPublished, callInfo)
	mock.lockSetInstanceIsPublished.Unlock()
	return mock.SetInstanceIsPublishedFunc(ctx, instanceID)
}

// SetInstanceIsPublishedCalls gets all the calls that were made to SetInstanceIsPublished.
// Check the length with:
//     len(mockedGraphDB.SetInstanceIsPublishedCalls())
func (mock *GraphDBMock) SetInstanceIsPublishedCalls() []struct {
	Ctx        context.Context
	InstanceID string
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
	}
	mock.lockSetInstanceIsPublished.RLock()
	calls = mock.calls.SetInstanceIsPublished
	mock.lockSetInstanceIsPublished.RUnlock()
	return calls
}
