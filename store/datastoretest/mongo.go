// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storetest

import (
	"context"
	"github.com/ONSdigital/dp-dataset-api/models"
	"github.com/ONSdigital/dp-dataset-api/store"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"sync"
)

// Ensure, that MongoDBMock does implement store.MongoDB.
// If this is not the case, regenerate this file with moq.
var _ store.MongoDB = &MongoDBMock{}

// MongoDBMock is a mock implementation of store.MongoDB.
//
//	func TestSomethingThatUsesMongoDB(t *testing.T) {
//
//		// make and configure a mocked store.MongoDB
//		mockedMongoDB := &MongoDBMock{
//			AcquireInstanceLockFunc: func(ctx context.Context, instanceID string) (string, error) {
//				panic("mock out the AcquireInstanceLock method")
//			},
//			AddEventToInstanceFunc: func(ctx context.Context, currentInstance *models.Instance, event *models.Event, eTagSelector string) (string, error) {
//				panic("mock out the AddEventToInstance method")
//			},
//			AddInstanceFunc: func(ctx context.Context, instance *models.Instance) (*models.Instance, error) {
//				panic("mock out the AddInstance method")
//			},
//			CheckDatasetExistsFunc: func(ctx context.Context, ID string, state string) error {
//				panic("mock out the CheckDatasetExists method")
//			},
//			CheckEditionExistsFunc: func(ctx context.Context, ID string, editionID string, state string) error {
//				panic("mock out the CheckEditionExists method")
//			},
//			CheckerFunc: func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
//				panic("mock out the Checker method")
//			},
//			CloseFunc: func(contextMoqParam context.Context) error {
//				panic("mock out the Close method")
//			},
//			DeleteDatasetFunc: func(ctx context.Context, ID string) error {
//				panic("mock out the DeleteDataset method")
//			},
//			DeleteEditionFunc: func(ctx context.Context, ID string) error {
//				panic("mock out the DeleteEdition method")
//			},
//			GetDatasetFunc: func(ctx context.Context, ID string) (*models.DatasetUpdate, error) {
//				panic("mock out the GetDataset method")
//			},
//			GetDatasetsFunc: func(ctx context.Context, offset int, limit int, authorised bool) ([]*models.DatasetUpdate, int, error) {
//				panic("mock out the GetDatasets method")
//			},
//			GetDatasetsByBasedOnFunc: func(ctx context.Context, ID string, offset int, limit int, authorised bool) ([]*models.DatasetUpdate, int, error) {
//				panic("mock out the GetDatasetsByBasedOn method")
//			},
//			GetDimensionOptionsFunc: func(ctx context.Context, version *models.Version, dimension string, offset int, limit int) ([]*models.PublicDimensionOption, int, error) {
//				panic("mock out the GetDimensionOptions method")
//			},
//			GetDimensionOptionsFromIDsFunc: func(ctx context.Context, version *models.Version, dimension string, ids []string) ([]*models.PublicDimensionOption, int, error) {
//				panic("mock out the GetDimensionOptionsFromIDs method")
//			},
//			GetDimensionsFunc: func(ctx context.Context, versionID string) ([]primitive.M, error) {
//				panic("mock out the GetDimensions method")
//			},
//			GetDimensionsFromInstanceFunc: func(ctx context.Context, ID string, offset int, limit int) ([]*models.DimensionOption, int, error) {
//				panic("mock out the GetDimensionsFromInstance method")
//			},
//			GetEditionFunc: func(ctx context.Context, ID string, editionID string, state string) (*models.EditionUpdate, error) {
//				panic("mock out the GetEdition method")
//			},
//			GetEditionsFunc: func(ctx context.Context, ID string, state string, offset int, limit int, authorised bool) ([]*models.EditionUpdate, int, error) {
//				panic("mock out the GetEditions method")
//			},
//			GetInstanceFunc: func(ctx context.Context, ID string, eTagSelector string) (*models.Instance, error) {
//				panic("mock out the GetInstance method")
//			},
//			GetInstancesFunc: func(ctx context.Context, states []string, datasets []string, offset int, limit int) ([]*models.Instance, int, error) {
//				panic("mock out the GetInstances method")
//			},
//			GetNextVersionFunc: func(ctx context.Context, datasetID string, editionID string) (int, error) {
//				panic("mock out the GetNextVersion method")
//			},
//			GetUniqueDimensionAndOptionsFunc: func(ctx context.Context, ID string, dimension string) ([]*string, int, error) {
//				panic("mock out the GetUniqueDimensionAndOptions method")
//			},
//			GetV2DatasetFunc: func(ctx context.Context, authorised bool, id string) (*models.LDDataset, error) {
//				panic("mock out the GetV2Dataset method")
//			},
//			GetV2DatasetsFunc: func(ctx context.Context, offset int, limit int, authorised bool) ([]*models.LDDataset, int, error) {
//				panic("mock out the GetV2Datasets method")
//			},
//			GetVersionFunc: func(ctx context.Context, datasetID string, editionID string, version int, state string) (*models.Version, error) {
//				panic("mock out the GetVersion method")
//			},
//			GetVersionsFunc: func(ctx context.Context, datasetID string, editionID string, state string, offset int, limit int) ([]models.Version, int, error) {
//				panic("mock out the GetVersions method")
//			},
//			RemoveDatasetVersionAndEditionLinksFunc: func(ctx context.Context, id string) error {
//				panic("mock out the RemoveDatasetVersionAndEditionLinks method")
//			},
//			UnlockInstanceFunc: func(ctx context.Context, lockID string)  {
//				panic("mock out the UnlockInstance method")
//			},
//			UpdateDatasetFunc: func(ctx context.Context, ID string, dataset *models.Dataset, currentState string) error {
//				panic("mock out the UpdateDataset method")
//			},
//			UpdateDatasetWithAssociationFunc: func(ctx context.Context, ID string, state string, version *models.Version) error {
//				panic("mock out the UpdateDatasetWithAssociation method")
//			},
//			UpdateDimensionsNodeIDAndOrderFunc: func(ctx context.Context, updates []*models.DimensionOption) error {
//				panic("mock out the UpdateDimensionsNodeIDAndOrder method")
//			},
//			UpdateETagForOptionsFunc: func(ctx context.Context, currentInstance *models.Instance, upserts []*models.CachedDimensionOption, updates []*models.DimensionOption, eTagSelector string) (string, error) {
//				panic("mock out the UpdateETagForOptions method")
//			},
//			UpdateInstanceFunc: func(ctx context.Context, currentInstance *models.Instance, updatedInstance *models.Instance, eTagSelector string) (string, error) {
//				panic("mock out the UpdateInstance method")
//			},
//			UpdateVersionFunc: func(ctx context.Context, currentVersion *models.Version, version *models.Version, eTagSelector string) (string, error) {
//				panic("mock out the UpdateVersion method")
//			},
//			UpsertContactFunc: func(ctx context.Context, ID string, update interface{}) error {
//				panic("mock out the UpsertContact method")
//			},
//			UpsertDatasetFunc: func(ctx context.Context, ID string, datasetDoc *models.DatasetUpdate) error {
//				panic("mock out the UpsertDataset method")
//			},
//			UpsertDimensionsToInstanceFunc: func(ctx context.Context, dimensions []*models.CachedDimensionOption) error {
//				panic("mock out the UpsertDimensionsToInstance method")
//			},
//			UpsertEditionFunc: func(ctx context.Context, datasetID string, edition string, editionDoc *models.EditionUpdate) error {
//				panic("mock out the UpsertEdition method")
//			},
//			UpsertLDDatasetFunc: func(ctx context.Context, ID string, datasetDoc *models.LDDataset) error {
//				panic("mock out the UpsertLDDataset method")
//			},
//			UpsertVersionFunc: func(ctx context.Context, ID string, versionDoc *models.Version) error {
//				panic("mock out the UpsertVersion method")
//			},
//		}
//
//		// use mockedMongoDB in code that requires store.MongoDB
//		// and then make assertions.
//
//	}
type MongoDBMock struct {
	// AcquireInstanceLockFunc mocks the AcquireInstanceLock method.
	AcquireInstanceLockFunc func(ctx context.Context, instanceID string) (string, error)

	// AddEventToInstanceFunc mocks the AddEventToInstance method.
	AddEventToInstanceFunc func(ctx context.Context, currentInstance *models.Instance, event *models.Event, eTagSelector string) (string, error)

	// AddInstanceFunc mocks the AddInstance method.
	AddInstanceFunc func(ctx context.Context, instance *models.Instance) (*models.Instance, error)

	// CheckDatasetExistsFunc mocks the CheckDatasetExists method.
	CheckDatasetExistsFunc func(ctx context.Context, ID string, state string) error

	// CheckEditionExistsFunc mocks the CheckEditionExists method.
	CheckEditionExistsFunc func(ctx context.Context, ID string, editionID string, state string) error

	// CheckerFunc mocks the Checker method.
	CheckerFunc func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(contextMoqParam context.Context) error

	// DeleteDatasetFunc mocks the DeleteDataset method.
	DeleteDatasetFunc func(ctx context.Context, ID string) error

	// DeleteEditionFunc mocks the DeleteEdition method.
	DeleteEditionFunc func(ctx context.Context, ID string) error

	// GetDatasetFunc mocks the GetDataset method.
	GetDatasetFunc func(ctx context.Context, ID string) (*models.DatasetUpdate, error)

	// GetDatasetsFunc mocks the GetDatasets method.
	GetDatasetsFunc func(ctx context.Context, offset int, limit int, authorised bool) ([]*models.DatasetUpdate, int, error)

	// GetDatasetsByBasedOnFunc mocks the GetDatasetsByBasedOn method.
	GetDatasetsByBasedOnFunc func(ctx context.Context, ID string, offset int, limit int, authorised bool) ([]*models.DatasetUpdate, int, error)

	// GetDimensionOptionsFunc mocks the GetDimensionOptions method.
	GetDimensionOptionsFunc func(ctx context.Context, version *models.Version, dimension string, offset int, limit int) ([]*models.PublicDimensionOption, int, error)

	// GetDimensionOptionsFromIDsFunc mocks the GetDimensionOptionsFromIDs method.
	GetDimensionOptionsFromIDsFunc func(ctx context.Context, version *models.Version, dimension string, ids []string) ([]*models.PublicDimensionOption, int, error)

	// GetDimensionsFunc mocks the GetDimensions method.
	GetDimensionsFunc func(ctx context.Context, versionID string) ([]primitive.M, error)

	// GetDimensionsFromInstanceFunc mocks the GetDimensionsFromInstance method.
	GetDimensionsFromInstanceFunc func(ctx context.Context, ID string, offset int, limit int) ([]*models.DimensionOption, int, error)

	// GetEditionFunc mocks the GetEdition method.
	GetEditionFunc func(ctx context.Context, ID string, editionID string, state string) (*models.EditionUpdate, error)

	// GetEditionsFunc mocks the GetEditions method.
	GetEditionsFunc func(ctx context.Context, ID string, state string, offset int, limit int, authorised bool) ([]*models.EditionUpdate, int, error)

	// GetInstanceFunc mocks the GetInstance method.
	GetInstanceFunc func(ctx context.Context, ID string, eTagSelector string) (*models.Instance, error)

	// GetInstancesFunc mocks the GetInstances method.
	GetInstancesFunc func(ctx context.Context, states []string, datasets []string, offset int, limit int) ([]*models.Instance, int, error)

	// GetNextVersionFunc mocks the GetNextVersion method.
	GetNextVersionFunc func(ctx context.Context, datasetID string, editionID string) (int, error)

	// GetUniqueDimensionAndOptionsFunc mocks the GetUniqueDimensionAndOptions method.
	GetUniqueDimensionAndOptionsFunc func(ctx context.Context, ID string, dimension string) ([]*string, int, error)

	// GetV2DatasetFunc mocks the GetV2Dataset method.
	GetV2DatasetFunc func(ctx context.Context, authorised bool, id string) (*models.LDDataset, error)

	// GetV2DatasetsFunc mocks the GetV2Datasets method.
	GetV2DatasetsFunc func(ctx context.Context, offset int, limit int, authorised bool) ([]*models.LDDataset, int, error)

	// GetVersionFunc mocks the GetVersion method.
	GetVersionFunc func(ctx context.Context, datasetID string, editionID string, version int, state string) (*models.Version, error)

	// GetVersionsFunc mocks the GetVersions method.
	GetVersionsFunc func(ctx context.Context, datasetID string, editionID string, state string, offset int, limit int) ([]models.Version, int, error)

	// RemoveDatasetVersionAndEditionLinksFunc mocks the RemoveDatasetVersionAndEditionLinks method.
	RemoveDatasetVersionAndEditionLinksFunc func(ctx context.Context, id string) error

	// UnlockInstanceFunc mocks the UnlockInstance method.
	UnlockInstanceFunc func(ctx context.Context, lockID string)

	// UpdateDatasetFunc mocks the UpdateDataset method.
	UpdateDatasetFunc func(ctx context.Context, ID string, dataset *models.Dataset, currentState string) error

	// UpdateDatasetWithAssociationFunc mocks the UpdateDatasetWithAssociation method.
	UpdateDatasetWithAssociationFunc func(ctx context.Context, ID string, state string, version *models.Version) error

	// UpdateDimensionsNodeIDAndOrderFunc mocks the UpdateDimensionsNodeIDAndOrder method.
	UpdateDimensionsNodeIDAndOrderFunc func(ctx context.Context, updates []*models.DimensionOption) error

	// UpdateETagForOptionsFunc mocks the UpdateETagForOptions method.
	UpdateETagForOptionsFunc func(ctx context.Context, currentInstance *models.Instance, upserts []*models.CachedDimensionOption, updates []*models.DimensionOption, eTagSelector string) (string, error)

	// UpdateInstanceFunc mocks the UpdateInstance method.
	UpdateInstanceFunc func(ctx context.Context, currentInstance *models.Instance, updatedInstance *models.Instance, eTagSelector string) (string, error)

	// UpdateVersionFunc mocks the UpdateVersion method.
	UpdateVersionFunc func(ctx context.Context, currentVersion *models.Version, version *models.Version, eTagSelector string) (string, error)

	// UpsertContactFunc mocks the UpsertContact method.
	UpsertContactFunc func(ctx context.Context, ID string, update interface{}) error

	// UpsertDatasetFunc mocks the UpsertDataset method.
	UpsertDatasetFunc func(ctx context.Context, ID string, datasetDoc *models.DatasetUpdate) error

	// UpsertDimensionsToInstanceFunc mocks the UpsertDimensionsToInstance method.
	UpsertDimensionsToInstanceFunc func(ctx context.Context, dimensions []*models.CachedDimensionOption) error

	// UpsertEditionFunc mocks the UpsertEdition method.
	UpsertEditionFunc func(ctx context.Context, datasetID string, edition string, editionDoc *models.EditionUpdate) error

	// UpsertLDDatasetFunc mocks the UpsertLDDataset method.
	UpsertLDDatasetFunc func(ctx context.Context, ID string, datasetDoc *models.LDDataset) error

	// UpsertVersionFunc mocks the UpsertVersion method.
	UpsertVersionFunc func(ctx context.Context, ID string, versionDoc *models.Version) error

	// calls tracks calls to the methods.
	calls struct {
		// AcquireInstanceLock holds details about calls to the AcquireInstanceLock method.
		AcquireInstanceLock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
		}
		// AddEventToInstance holds details about calls to the AddEventToInstance method.
		AddEventToInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CurrentInstance is the currentInstance argument value.
			CurrentInstance *models.Instance
			// Event is the event argument value.
			Event *models.Event
			// ETagSelector is the eTagSelector argument value.
			ETagSelector string
		}
		// AddInstance holds details about calls to the AddInstance method.
		AddInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Instance is the instance argument value.
			Instance *models.Instance
		}
		// CheckDatasetExists holds details about calls to the CheckDatasetExists method.
		CheckDatasetExists []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
			// State is the state argument value.
			State string
		}
		// CheckEditionExists holds details about calls to the CheckEditionExists method.
		CheckEditionExists []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
			// EditionID is the editionID argument value.
			EditionID string
			// State is the state argument value.
			State string
		}
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CheckState is the checkState argument value.
			CheckState *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// DeleteDataset holds details about calls to the DeleteDataset method.
		DeleteDataset []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
		}
		// DeleteEdition holds details about calls to the DeleteEdition method.
		DeleteEdition []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
		}
		// GetDataset holds details about calls to the GetDataset method.
		GetDataset []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
		}
		// GetDatasets holds details about calls to the GetDatasets method.
		GetDatasets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
			// Authorised is the authorised argument value.
			Authorised bool
		}
		// GetDatasetsByBasedOn holds details about calls to the GetDatasetsByBasedOn method.
		GetDatasetsByBasedOn []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
			// Authorised is the authorised argument value.
			Authorised bool
		}
		// GetDimensionOptions holds details about calls to the GetDimensionOptions method.
		GetDimensionOptions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Version is the version argument value.
			Version *models.Version
			// Dimension is the dimension argument value.
			Dimension string
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
		}
		// GetDimensionOptionsFromIDs holds details about calls to the GetDimensionOptionsFromIDs method.
		GetDimensionOptionsFromIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Version is the version argument value.
			Version *models.Version
			// Dimension is the dimension argument value.
			Dimension string
			// Ids is the ids argument value.
			Ids []string
		}
		// GetDimensions holds details about calls to the GetDimensions method.
		GetDimensions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// VersionID is the versionID argument value.
			VersionID string
		}
		// GetDimensionsFromInstance holds details about calls to the GetDimensionsFromInstance method.
		GetDimensionsFromInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
		}
		// GetEdition holds details about calls to the GetEdition method.
		GetEdition []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
			// EditionID is the editionID argument value.
			EditionID string
			// State is the state argument value.
			State string
		}
		// GetEditions holds details about calls to the GetEditions method.
		GetEditions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
			// State is the state argument value.
			State string
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
			// Authorised is the authorised argument value.
			Authorised bool
		}
		// GetInstance holds details about calls to the GetInstance method.
		GetInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
			// ETagSelector is the eTagSelector argument value.
			ETagSelector string
		}
		// GetInstances holds details about calls to the GetInstances method.
		GetInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// States is the states argument value.
			States []string
			// Datasets is the datasets argument value.
			Datasets []string
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
		}
		// GetNextVersion holds details about calls to the GetNextVersion method.
		GetNextVersion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
		}
		// GetUniqueDimensionAndOptions holds details about calls to the GetUniqueDimensionAndOptions method.
		GetUniqueDimensionAndOptions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
			// Dimension is the dimension argument value.
			Dimension string
		}
		// GetV2Dataset holds details about calls to the GetV2Dataset method.
		GetV2Dataset []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Authorised is the authorised argument value.
			Authorised bool
			// ID is the id argument value.
			ID string
		}
		// GetV2Datasets holds details about calls to the GetV2Datasets method.
		GetV2Datasets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
			// Authorised is the authorised argument value.
			Authorised bool
		}
		// GetVersion holds details about calls to the GetVersion method.
		GetVersion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
			// Version is the version argument value.
			Version int
			// State is the state argument value.
			State string
		}
		// GetVersions holds details about calls to the GetVersions method.
		GetVersions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
			// State is the state argument value.
			State string
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
		}
		// RemoveDatasetVersionAndEditionLinks holds details about calls to the RemoveDatasetVersionAndEditionLinks method.
		RemoveDatasetVersionAndEditionLinks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// UnlockInstance holds details about calls to the UnlockInstance method.
		UnlockInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// LockID is the lockID argument value.
			LockID string
		}
		// UpdateDataset holds details about calls to the UpdateDataset method.
		UpdateDataset []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
			// Dataset is the dataset argument value.
			Dataset *models.Dataset
			// CurrentState is the currentState argument value.
			CurrentState string
		}
		// UpdateDatasetWithAssociation holds details about calls to the UpdateDatasetWithAssociation method.
		UpdateDatasetWithAssociation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
			// State is the state argument value.
			State string
			// Version is the version argument value.
			Version *models.Version
		}
		// UpdateDimensionsNodeIDAndOrder holds details about calls to the UpdateDimensionsNodeIDAndOrder method.
		UpdateDimensionsNodeIDAndOrder []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Updates is the updates argument value.
			Updates []*models.DimensionOption
		}
		// UpdateETagForOptions holds details about calls to the UpdateETagForOptions method.
		UpdateETagForOptions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CurrentInstance is the currentInstance argument value.
			CurrentInstance *models.Instance
			// Upserts is the upserts argument value.
			Upserts []*models.CachedDimensionOption
			// Updates is the updates argument value.
			Updates []*models.DimensionOption
			// ETagSelector is the eTagSelector argument value.
			ETagSelector string
		}
		// UpdateInstance holds details about calls to the UpdateInstance method.
		UpdateInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CurrentInstance is the currentInstance argument value.
			CurrentInstance *models.Instance
			// UpdatedInstance is the updatedInstance argument value.
			UpdatedInstance *models.Instance
			// ETagSelector is the eTagSelector argument value.
			ETagSelector string
		}
		// UpdateVersion holds details about calls to the UpdateVersion method.
		UpdateVersion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CurrentVersion is the currentVersion argument value.
			CurrentVersion *models.Version
			// Version is the version argument value.
			Version *models.Version
			// ETagSelector is the eTagSelector argument value.
			ETagSelector string
		}
		// UpsertContact holds details about calls to the UpsertContact method.
		UpsertContact []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
			// Update is the update argument value.
			Update interface{}
		}
		// UpsertDataset holds details about calls to the UpsertDataset method.
		UpsertDataset []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
			// DatasetDoc is the datasetDoc argument value.
			DatasetDoc *models.DatasetUpdate
		}
		// UpsertDimensionsToInstance holds details about calls to the UpsertDimensionsToInstance method.
		UpsertDimensionsToInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Dimensions is the dimensions argument value.
			Dimensions []*models.CachedDimensionOption
		}
		// UpsertEdition holds details about calls to the UpsertEdition method.
		UpsertEdition []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DatasetID is the datasetID argument value.
			DatasetID string
			// Edition is the edition argument value.
			Edition string
			// EditionDoc is the editionDoc argument value.
			EditionDoc *models.EditionUpdate
		}
		// UpsertLDDataset holds details about calls to the UpsertLDDataset method.
		UpsertLDDataset []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
			// DatasetDoc is the datasetDoc argument value.
			DatasetDoc *models.LDDataset
		}
		// UpsertVersion holds details about calls to the UpsertVersion method.
		UpsertVersion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
			// VersionDoc is the versionDoc argument value.
			VersionDoc *models.Version
		}
	}
	lockAcquireInstanceLock                 sync.RWMutex
	lockAddEventToInstance                  sync.RWMutex
	lockAddInstance                         sync.RWMutex
	lockCheckDatasetExists                  sync.RWMutex
	lockCheckEditionExists                  sync.RWMutex
	lockChecker                             sync.RWMutex
	lockClose                               sync.RWMutex
	lockDeleteDataset                       sync.RWMutex
	lockDeleteEdition                       sync.RWMutex
	lockGetDataset                          sync.RWMutex
	lockGetDatasets                         sync.RWMutex
	lockGetDatasetsByBasedOn                sync.RWMutex
	lockGetDimensionOptions                 sync.RWMutex
	lockGetDimensionOptionsFromIDs          sync.RWMutex
	lockGetDimensions                       sync.RWMutex
	lockGetDimensionsFromInstance           sync.RWMutex
	lockGetEdition                          sync.RWMutex
	lockGetEditions                         sync.RWMutex
	lockGetInstance                         sync.RWMutex
	lockGetInstances                        sync.RWMutex
	lockGetNextVersion                      sync.RWMutex
	lockGetUniqueDimensionAndOptions        sync.RWMutex
	lockGetV2Dataset                        sync.RWMutex
	lockGetV2Datasets                       sync.RWMutex
	lockGetVersion                          sync.RWMutex
	lockGetVersions                         sync.RWMutex
	lockRemoveDatasetVersionAndEditionLinks sync.RWMutex
	lockUnlockInstance                      sync.RWMutex
	lockUpdateDataset                       sync.RWMutex
	lockUpdateDatasetWithAssociation        sync.RWMutex
	lockUpdateDimensionsNodeIDAndOrder      sync.RWMutex
	lockUpdateETagForOptions                sync.RWMutex
	lockUpdateInstance                      sync.RWMutex
	lockUpdateVersion                       sync.RWMutex
	lockUpsertContact                       sync.RWMutex
	lockUpsertDataset                       sync.RWMutex
	lockUpsertDimensionsToInstance          sync.RWMutex
	lockUpsertEdition                       sync.RWMutex
	lockUpsertLDDataset                     sync.RWMutex
	lockUpsertVersion                       sync.RWMutex
}

// AcquireInstanceLock calls AcquireInstanceLockFunc.
func (mock *MongoDBMock) AcquireInstanceLock(ctx context.Context, instanceID string) (string, error) {
	if mock.AcquireInstanceLockFunc == nil {
		panic("MongoDBMock.AcquireInstanceLockFunc: method is nil but MongoDB.AcquireInstanceLock was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
	}
	mock.lockAcquireInstanceLock.Lock()
	mock.calls.AcquireInstanceLock = append(mock.calls.AcquireInstanceLock, callInfo)
	mock.lockAcquireInstanceLock.Unlock()
	return mock.AcquireInstanceLockFunc(ctx, instanceID)
}

// AcquireInstanceLockCalls gets all the calls that were made to AcquireInstanceLock.
// Check the length with:
//
//	len(mockedMongoDB.AcquireInstanceLockCalls())
func (mock *MongoDBMock) AcquireInstanceLockCalls() []struct {
	Ctx        context.Context
	InstanceID string
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
	}
	mock.lockAcquireInstanceLock.RLock()
	calls = mock.calls.AcquireInstanceLock
	mock.lockAcquireInstanceLock.RUnlock()
	return calls
}

// AddEventToInstance calls AddEventToInstanceFunc.
func (mock *MongoDBMock) AddEventToInstance(ctx context.Context, currentInstance *models.Instance, event *models.Event, eTagSelector string) (string, error) {
	if mock.AddEventToInstanceFunc == nil {
		panic("MongoDBMock.AddEventToInstanceFunc: method is nil but MongoDB.AddEventToInstance was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		CurrentInstance *models.Instance
		Event           *models.Event
		ETagSelector    string
	}{
		Ctx:             ctx,
		CurrentInstance: currentInstance,
		Event:           event,
		ETagSelector:    eTagSelector,
	}
	mock.lockAddEventToInstance.Lock()
	mock.calls.AddEventToInstance = append(mock.calls.AddEventToInstance, callInfo)
	mock.lockAddEventToInstance.Unlock()
	return mock.AddEventToInstanceFunc(ctx, currentInstance, event, eTagSelector)
}

// AddEventToInstanceCalls gets all the calls that were made to AddEventToInstance.
// Check the length with:
//
//	len(mockedMongoDB.AddEventToInstanceCalls())
func (mock *MongoDBMock) AddEventToInstanceCalls() []struct {
	Ctx             context.Context
	CurrentInstance *models.Instance
	Event           *models.Event
	ETagSelector    string
} {
	var calls []struct {
		Ctx             context.Context
		CurrentInstance *models.Instance
		Event           *models.Event
		ETagSelector    string
	}
	mock.lockAddEventToInstance.RLock()
	calls = mock.calls.AddEventToInstance
	mock.lockAddEventToInstance.RUnlock()
	return calls
}

// AddInstance calls AddInstanceFunc.
func (mock *MongoDBMock) AddInstance(ctx context.Context, instance *models.Instance) (*models.Instance, error) {
	if mock.AddInstanceFunc == nil {
		panic("MongoDBMock.AddInstanceFunc: method is nil but MongoDB.AddInstance was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Instance *models.Instance
	}{
		Ctx:      ctx,
		Instance: instance,
	}
	mock.lockAddInstance.Lock()
	mock.calls.AddInstance = append(mock.calls.AddInstance, callInfo)
	mock.lockAddInstance.Unlock()
	return mock.AddInstanceFunc(ctx, instance)
}

// AddInstanceCalls gets all the calls that were made to AddInstance.
// Check the length with:
//
//	len(mockedMongoDB.AddInstanceCalls())
func (mock *MongoDBMock) AddInstanceCalls() []struct {
	Ctx      context.Context
	Instance *models.Instance
} {
	var calls []struct {
		Ctx      context.Context
		Instance *models.Instance
	}
	mock.lockAddInstance.RLock()
	calls = mock.calls.AddInstance
	mock.lockAddInstance.RUnlock()
	return calls
}

// CheckDatasetExists calls CheckDatasetExistsFunc.
func (mock *MongoDBMock) CheckDatasetExists(ctx context.Context, ID string, state string) error {
	if mock.CheckDatasetExistsFunc == nil {
		panic("MongoDBMock.CheckDatasetExistsFunc: method is nil but MongoDB.CheckDatasetExists was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    string
		State string
	}{
		Ctx:   ctx,
		ID:    ID,
		State: state,
	}
	mock.lockCheckDatasetExists.Lock()
	mock.calls.CheckDatasetExists = append(mock.calls.CheckDatasetExists, callInfo)
	mock.lockCheckDatasetExists.Unlock()
	return mock.CheckDatasetExistsFunc(ctx, ID, state)
}

// CheckDatasetExistsCalls gets all the calls that were made to CheckDatasetExists.
// Check the length with:
//
//	len(mockedMongoDB.CheckDatasetExistsCalls())
func (mock *MongoDBMock) CheckDatasetExistsCalls() []struct {
	Ctx   context.Context
	ID    string
	State string
} {
	var calls []struct {
		Ctx   context.Context
		ID    string
		State string
	}
	mock.lockCheckDatasetExists.RLock()
	calls = mock.calls.CheckDatasetExists
	mock.lockCheckDatasetExists.RUnlock()
	return calls
}

// CheckEditionExists calls CheckEditionExistsFunc.
func (mock *MongoDBMock) CheckEditionExists(ctx context.Context, ID string, editionID string, state string) error {
	if mock.CheckEditionExistsFunc == nil {
		panic("MongoDBMock.CheckEditionExistsFunc: method is nil but MongoDB.CheckEditionExists was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ID        string
		EditionID string
		State     string
	}{
		Ctx:       ctx,
		ID:        ID,
		EditionID: editionID,
		State:     state,
	}
	mock.lockCheckEditionExists.Lock()
	mock.calls.CheckEditionExists = append(mock.calls.CheckEditionExists, callInfo)
	mock.lockCheckEditionExists.Unlock()
	return mock.CheckEditionExistsFunc(ctx, ID, editionID, state)
}

// CheckEditionExistsCalls gets all the calls that were made to CheckEditionExists.
// Check the length with:
//
//	len(mockedMongoDB.CheckEditionExistsCalls())
func (mock *MongoDBMock) CheckEditionExistsCalls() []struct {
	Ctx       context.Context
	ID        string
	EditionID string
	State     string
} {
	var calls []struct {
		Ctx       context.Context
		ID        string
		EditionID string
		State     string
	}
	mock.lockCheckEditionExists.RLock()
	calls = mock.calls.CheckEditionExists
	mock.lockCheckEditionExists.RUnlock()
	return calls
}

// Checker calls CheckerFunc.
func (mock *MongoDBMock) Checker(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("MongoDBMock.CheckerFunc: method is nil but MongoDB.Checker was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}{
		ContextMoqParam: contextMoqParam,
		CheckState:      checkState,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(contextMoqParam, checkState)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//
//	len(mockedMongoDB.CheckerCalls())
func (mock *MongoDBMock) CheckerCalls() []struct {
	ContextMoqParam context.Context
	CheckState      *healthcheck.CheckState
} {
	var calls []struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *MongoDBMock) Close(contextMoqParam context.Context) error {
	if mock.CloseFunc == nil {
		panic("MongoDBMock.CloseFunc: method is nil but MongoDB.Close was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(contextMoqParam)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedMongoDB.CloseCalls())
func (mock *MongoDBMock) CloseCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// DeleteDataset calls DeleteDatasetFunc.
func (mock *MongoDBMock) DeleteDataset(ctx context.Context, ID string) error {
	if mock.DeleteDatasetFunc == nil {
		panic("MongoDBMock.DeleteDatasetFunc: method is nil but MongoDB.DeleteDataset was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  ID,
	}
	mock.lockDeleteDataset.Lock()
	mock.calls.DeleteDataset = append(mock.calls.DeleteDataset, callInfo)
	mock.lockDeleteDataset.Unlock()
	return mock.DeleteDatasetFunc(ctx, ID)
}

// DeleteDatasetCalls gets all the calls that were made to DeleteDataset.
// Check the length with:
//
//	len(mockedMongoDB.DeleteDatasetCalls())
func (mock *MongoDBMock) DeleteDatasetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDeleteDataset.RLock()
	calls = mock.calls.DeleteDataset
	mock.lockDeleteDataset.RUnlock()
	return calls
}

// DeleteEdition calls DeleteEditionFunc.
func (mock *MongoDBMock) DeleteEdition(ctx context.Context, ID string) error {
	if mock.DeleteEditionFunc == nil {
		panic("MongoDBMock.DeleteEditionFunc: method is nil but MongoDB.DeleteEdition was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  ID,
	}
	mock.lockDeleteEdition.Lock()
	mock.calls.DeleteEdition = append(mock.calls.DeleteEdition, callInfo)
	mock.lockDeleteEdition.Unlock()
	return mock.DeleteEditionFunc(ctx, ID)
}

// DeleteEditionCalls gets all the calls that were made to DeleteEdition.
// Check the length with:
//
//	len(mockedMongoDB.DeleteEditionCalls())
func (mock *MongoDBMock) DeleteEditionCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDeleteEdition.RLock()
	calls = mock.calls.DeleteEdition
	mock.lockDeleteEdition.RUnlock()
	return calls
}

// GetDataset calls GetDatasetFunc.
func (mock *MongoDBMock) GetDataset(ctx context.Context, ID string) (*models.DatasetUpdate, error) {
	if mock.GetDatasetFunc == nil {
		panic("MongoDBMock.GetDatasetFunc: method is nil but MongoDB.GetDataset was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  ID,
	}
	mock.lockGetDataset.Lock()
	mock.calls.GetDataset = append(mock.calls.GetDataset, callInfo)
	mock.lockGetDataset.Unlock()
	return mock.GetDatasetFunc(ctx, ID)
}

// GetDatasetCalls gets all the calls that were made to GetDataset.
// Check the length with:
//
//	len(mockedMongoDB.GetDatasetCalls())
func (mock *MongoDBMock) GetDatasetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetDataset.RLock()
	calls = mock.calls.GetDataset
	mock.lockGetDataset.RUnlock()
	return calls
}

// GetDatasets calls GetDatasetsFunc.
func (mock *MongoDBMock) GetDatasets(ctx context.Context, offset int, limit int, authorised bool) ([]*models.DatasetUpdate, int, error) {
	if mock.GetDatasetsFunc == nil {
		panic("MongoDBMock.GetDatasetsFunc: method is nil but MongoDB.GetDatasets was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Offset     int
		Limit      int
		Authorised bool
	}{
		Ctx:        ctx,
		Offset:     offset,
		Limit:      limit,
		Authorised: authorised,
	}
	mock.lockGetDatasets.Lock()
	mock.calls.GetDatasets = append(mock.calls.GetDatasets, callInfo)
	mock.lockGetDatasets.Unlock()
	return mock.GetDatasetsFunc(ctx, offset, limit, authorised)
}

// GetDatasetsCalls gets all the calls that were made to GetDatasets.
// Check the length with:
//
//	len(mockedMongoDB.GetDatasetsCalls())
func (mock *MongoDBMock) GetDatasetsCalls() []struct {
	Ctx        context.Context
	Offset     int
	Limit      int
	Authorised bool
} {
	var calls []struct {
		Ctx        context.Context
		Offset     int
		Limit      int
		Authorised bool
	}
	mock.lockGetDatasets.RLock()
	calls = mock.calls.GetDatasets
	mock.lockGetDatasets.RUnlock()
	return calls
}

// GetDatasetsByBasedOn calls GetDatasetsByBasedOnFunc.
func (mock *MongoDBMock) GetDatasetsByBasedOn(ctx context.Context, ID string, offset int, limit int, authorised bool) ([]*models.DatasetUpdate, int, error) {
	if mock.GetDatasetsByBasedOnFunc == nil {
		panic("MongoDBMock.GetDatasetsByBasedOnFunc: method is nil but MongoDB.GetDatasetsByBasedOn was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ID         string
		Offset     int
		Limit      int
		Authorised bool
	}{
		Ctx:        ctx,
		ID:         ID,
		Offset:     offset,
		Limit:      limit,
		Authorised: authorised,
	}
	mock.lockGetDatasetsByBasedOn.Lock()
	mock.calls.GetDatasetsByBasedOn = append(mock.calls.GetDatasetsByBasedOn, callInfo)
	mock.lockGetDatasetsByBasedOn.Unlock()
	return mock.GetDatasetsByBasedOnFunc(ctx, ID, offset, limit, authorised)
}

// GetDatasetsByBasedOnCalls gets all the calls that were made to GetDatasetsByBasedOn.
// Check the length with:
//
//	len(mockedMongoDB.GetDatasetsByBasedOnCalls())
func (mock *MongoDBMock) GetDatasetsByBasedOnCalls() []struct {
	Ctx        context.Context
	ID         string
	Offset     int
	Limit      int
	Authorised bool
} {
	var calls []struct {
		Ctx        context.Context
		ID         string
		Offset     int
		Limit      int
		Authorised bool
	}
	mock.lockGetDatasetsByBasedOn.RLock()
	calls = mock.calls.GetDatasetsByBasedOn
	mock.lockGetDatasetsByBasedOn.RUnlock()
	return calls
}

// GetDimensionOptions calls GetDimensionOptionsFunc.
func (mock *MongoDBMock) GetDimensionOptions(ctx context.Context, version *models.Version, dimension string, offset int, limit int) ([]*models.PublicDimensionOption, int, error) {
	if mock.GetDimensionOptionsFunc == nil {
		panic("MongoDBMock.GetDimensionOptionsFunc: method is nil but MongoDB.GetDimensionOptions was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Version   *models.Version
		Dimension string
		Offset    int
		Limit     int
	}{
		Ctx:       ctx,
		Version:   version,
		Dimension: dimension,
		Offset:    offset,
		Limit:     limit,
	}
	mock.lockGetDimensionOptions.Lock()
	mock.calls.GetDimensionOptions = append(mock.calls.GetDimensionOptions, callInfo)
	mock.lockGetDimensionOptions.Unlock()
	return mock.GetDimensionOptionsFunc(ctx, version, dimension, offset, limit)
}

// GetDimensionOptionsCalls gets all the calls that were made to GetDimensionOptions.
// Check the length with:
//
//	len(mockedMongoDB.GetDimensionOptionsCalls())
func (mock *MongoDBMock) GetDimensionOptionsCalls() []struct {
	Ctx       context.Context
	Version   *models.Version
	Dimension string
	Offset    int
	Limit     int
} {
	var calls []struct {
		Ctx       context.Context
		Version   *models.Version
		Dimension string
		Offset    int
		Limit     int
	}
	mock.lockGetDimensionOptions.RLock()
	calls = mock.calls.GetDimensionOptions
	mock.lockGetDimensionOptions.RUnlock()
	return calls
}

// GetDimensionOptionsFromIDs calls GetDimensionOptionsFromIDsFunc.
func (mock *MongoDBMock) GetDimensionOptionsFromIDs(ctx context.Context, version *models.Version, dimension string, ids []string) ([]*models.PublicDimensionOption, int, error) {
	if mock.GetDimensionOptionsFromIDsFunc == nil {
		panic("MongoDBMock.GetDimensionOptionsFromIDsFunc: method is nil but MongoDB.GetDimensionOptionsFromIDs was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Version   *models.Version
		Dimension string
		Ids       []string
	}{
		Ctx:       ctx,
		Version:   version,
		Dimension: dimension,
		Ids:       ids,
	}
	mock.lockGetDimensionOptionsFromIDs.Lock()
	mock.calls.GetDimensionOptionsFromIDs = append(mock.calls.GetDimensionOptionsFromIDs, callInfo)
	mock.lockGetDimensionOptionsFromIDs.Unlock()
	return mock.GetDimensionOptionsFromIDsFunc(ctx, version, dimension, ids)
}

// GetDimensionOptionsFromIDsCalls gets all the calls that were made to GetDimensionOptionsFromIDs.
// Check the length with:
//
//	len(mockedMongoDB.GetDimensionOptionsFromIDsCalls())
func (mock *MongoDBMock) GetDimensionOptionsFromIDsCalls() []struct {
	Ctx       context.Context
	Version   *models.Version
	Dimension string
	Ids       []string
} {
	var calls []struct {
		Ctx       context.Context
		Version   *models.Version
		Dimension string
		Ids       []string
	}
	mock.lockGetDimensionOptionsFromIDs.RLock()
	calls = mock.calls.GetDimensionOptionsFromIDs
	mock.lockGetDimensionOptionsFromIDs.RUnlock()
	return calls
}

// GetDimensions calls GetDimensionsFunc.
func (mock *MongoDBMock) GetDimensions(ctx context.Context, versionID string) ([]primitive.M, error) {
	if mock.GetDimensionsFunc == nil {
		panic("MongoDBMock.GetDimensionsFunc: method is nil but MongoDB.GetDimensions was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		VersionID string
	}{
		Ctx:       ctx,
		VersionID: versionID,
	}
	mock.lockGetDimensions.Lock()
	mock.calls.GetDimensions = append(mock.calls.GetDimensions, callInfo)
	mock.lockGetDimensions.Unlock()
	return mock.GetDimensionsFunc(ctx, versionID)
}

// GetDimensionsCalls gets all the calls that were made to GetDimensions.
// Check the length with:
//
//	len(mockedMongoDB.GetDimensionsCalls())
func (mock *MongoDBMock) GetDimensionsCalls() []struct {
	Ctx       context.Context
	VersionID string
} {
	var calls []struct {
		Ctx       context.Context
		VersionID string
	}
	mock.lockGetDimensions.RLock()
	calls = mock.calls.GetDimensions
	mock.lockGetDimensions.RUnlock()
	return calls
}

// GetDimensionsFromInstance calls GetDimensionsFromInstanceFunc.
func (mock *MongoDBMock) GetDimensionsFromInstance(ctx context.Context, ID string, offset int, limit int) ([]*models.DimensionOption, int, error) {
	if mock.GetDimensionsFromInstanceFunc == nil {
		panic("MongoDBMock.GetDimensionsFromInstanceFunc: method is nil but MongoDB.GetDimensionsFromInstance was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ID     string
		Offset int
		Limit  int
	}{
		Ctx:    ctx,
		ID:     ID,
		Offset: offset,
		Limit:  limit,
	}
	mock.lockGetDimensionsFromInstance.Lock()
	mock.calls.GetDimensionsFromInstance = append(mock.calls.GetDimensionsFromInstance, callInfo)
	mock.lockGetDimensionsFromInstance.Unlock()
	return mock.GetDimensionsFromInstanceFunc(ctx, ID, offset, limit)
}

// GetDimensionsFromInstanceCalls gets all the calls that were made to GetDimensionsFromInstance.
// Check the length with:
//
//	len(mockedMongoDB.GetDimensionsFromInstanceCalls())
func (mock *MongoDBMock) GetDimensionsFromInstanceCalls() []struct {
	Ctx    context.Context
	ID     string
	Offset int
	Limit  int
} {
	var calls []struct {
		Ctx    context.Context
		ID     string
		Offset int
		Limit  int
	}
	mock.lockGetDimensionsFromInstance.RLock()
	calls = mock.calls.GetDimensionsFromInstance
	mock.lockGetDimensionsFromInstance.RUnlock()
	return calls
}

// GetEdition calls GetEditionFunc.
func (mock *MongoDBMock) GetEdition(ctx context.Context, ID string, editionID string, state string) (*models.EditionUpdate, error) {
	if mock.GetEditionFunc == nil {
		panic("MongoDBMock.GetEditionFunc: method is nil but MongoDB.GetEdition was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ID        string
		EditionID string
		State     string
	}{
		Ctx:       ctx,
		ID:        ID,
		EditionID: editionID,
		State:     state,
	}
	mock.lockGetEdition.Lock()
	mock.calls.GetEdition = append(mock.calls.GetEdition, callInfo)
	mock.lockGetEdition.Unlock()
	return mock.GetEditionFunc(ctx, ID, editionID, state)
}

// GetEditionCalls gets all the calls that were made to GetEdition.
// Check the length with:
//
//	len(mockedMongoDB.GetEditionCalls())
func (mock *MongoDBMock) GetEditionCalls() []struct {
	Ctx       context.Context
	ID        string
	EditionID string
	State     string
} {
	var calls []struct {
		Ctx       context.Context
		ID        string
		EditionID string
		State     string
	}
	mock.lockGetEdition.RLock()
	calls = mock.calls.GetEdition
	mock.lockGetEdition.RUnlock()
	return calls
}

// GetEditions calls GetEditionsFunc.
func (mock *MongoDBMock) GetEditions(ctx context.Context, ID string, state string, offset int, limit int, authorised bool) ([]*models.EditionUpdate, int, error) {
	if mock.GetEditionsFunc == nil {
		panic("MongoDBMock.GetEditionsFunc: method is nil but MongoDB.GetEditions was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ID         string
		State      string
		Offset     int
		Limit      int
		Authorised bool
	}{
		Ctx:        ctx,
		ID:         ID,
		State:      state,
		Offset:     offset,
		Limit:      limit,
		Authorised: authorised,
	}
	mock.lockGetEditions.Lock()
	mock.calls.GetEditions = append(mock.calls.GetEditions, callInfo)
	mock.lockGetEditions.Unlock()
	return mock.GetEditionsFunc(ctx, ID, state, offset, limit, authorised)
}

// GetEditionsCalls gets all the calls that were made to GetEditions.
// Check the length with:
//
//	len(mockedMongoDB.GetEditionsCalls())
func (mock *MongoDBMock) GetEditionsCalls() []struct {
	Ctx        context.Context
	ID         string
	State      string
	Offset     int
	Limit      int
	Authorised bool
} {
	var calls []struct {
		Ctx        context.Context
		ID         string
		State      string
		Offset     int
		Limit      int
		Authorised bool
	}
	mock.lockGetEditions.RLock()
	calls = mock.calls.GetEditions
	mock.lockGetEditions.RUnlock()
	return calls
}

// GetInstance calls GetInstanceFunc.
func (mock *MongoDBMock) GetInstance(ctx context.Context, ID string, eTagSelector string) (*models.Instance, error) {
	if mock.GetInstanceFunc == nil {
		panic("MongoDBMock.GetInstanceFunc: method is nil but MongoDB.GetInstance was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ID           string
		ETagSelector string
	}{
		Ctx:          ctx,
		ID:           ID,
		ETagSelector: eTagSelector,
	}
	mock.lockGetInstance.Lock()
	mock.calls.GetInstance = append(mock.calls.GetInstance, callInfo)
	mock.lockGetInstance.Unlock()
	return mock.GetInstanceFunc(ctx, ID, eTagSelector)
}

// GetInstanceCalls gets all the calls that were made to GetInstance.
// Check the length with:
//
//	len(mockedMongoDB.GetInstanceCalls())
func (mock *MongoDBMock) GetInstanceCalls() []struct {
	Ctx          context.Context
	ID           string
	ETagSelector string
} {
	var calls []struct {
		Ctx          context.Context
		ID           string
		ETagSelector string
	}
	mock.lockGetInstance.RLock()
	calls = mock.calls.GetInstance
	mock.lockGetInstance.RUnlock()
	return calls
}

// GetInstances calls GetInstancesFunc.
func (mock *MongoDBMock) GetInstances(ctx context.Context, states []string, datasets []string, offset int, limit int) ([]*models.Instance, int, error) {
	if mock.GetInstancesFunc == nil {
		panic("MongoDBMock.GetInstancesFunc: method is nil but MongoDB.GetInstances was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		States   []string
		Datasets []string
		Offset   int
		Limit    int
	}{
		Ctx:      ctx,
		States:   states,
		Datasets: datasets,
		Offset:   offset,
		Limit:    limit,
	}
	mock.lockGetInstances.Lock()
	mock.calls.GetInstances = append(mock.calls.GetInstances, callInfo)
	mock.lockGetInstances.Unlock()
	return mock.GetInstancesFunc(ctx, states, datasets, offset, limit)
}

// GetInstancesCalls gets all the calls that were made to GetInstances.
// Check the length with:
//
//	len(mockedMongoDB.GetInstancesCalls())
func (mock *MongoDBMock) GetInstancesCalls() []struct {
	Ctx      context.Context
	States   []string
	Datasets []string
	Offset   int
	Limit    int
} {
	var calls []struct {
		Ctx      context.Context
		States   []string
		Datasets []string
		Offset   int
		Limit    int
	}
	mock.lockGetInstances.RLock()
	calls = mock.calls.GetInstances
	mock.lockGetInstances.RUnlock()
	return calls
}

// GetNextVersion calls GetNextVersionFunc.
func (mock *MongoDBMock) GetNextVersion(ctx context.Context, datasetID string, editionID string) (int, error) {
	if mock.GetNextVersionFunc == nil {
		panic("MongoDBMock.GetNextVersionFunc: method is nil but MongoDB.GetNextVersion was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		DatasetID string
		EditionID string
	}{
		Ctx:       ctx,
		DatasetID: datasetID,
		EditionID: editionID,
	}
	mock.lockGetNextVersion.Lock()
	mock.calls.GetNextVersion = append(mock.calls.GetNextVersion, callInfo)
	mock.lockGetNextVersion.Unlock()
	return mock.GetNextVersionFunc(ctx, datasetID, editionID)
}

// GetNextVersionCalls gets all the calls that were made to GetNextVersion.
// Check the length with:
//
//	len(mockedMongoDB.GetNextVersionCalls())
func (mock *MongoDBMock) GetNextVersionCalls() []struct {
	Ctx       context.Context
	DatasetID string
	EditionID string
} {
	var calls []struct {
		Ctx       context.Context
		DatasetID string
		EditionID string
	}
	mock.lockGetNextVersion.RLock()
	calls = mock.calls.GetNextVersion
	mock.lockGetNextVersion.RUnlock()
	return calls
}

// GetUniqueDimensionAndOptions calls GetUniqueDimensionAndOptionsFunc.
func (mock *MongoDBMock) GetUniqueDimensionAndOptions(ctx context.Context, ID string, dimension string) ([]*string, int, error) {
	if mock.GetUniqueDimensionAndOptionsFunc == nil {
		panic("MongoDBMock.GetUniqueDimensionAndOptionsFunc: method is nil but MongoDB.GetUniqueDimensionAndOptions was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ID        string
		Dimension string
	}{
		Ctx:       ctx,
		ID:        ID,
		Dimension: dimension,
	}
	mock.lockGetUniqueDimensionAndOptions.Lock()
	mock.calls.GetUniqueDimensionAndOptions = append(mock.calls.GetUniqueDimensionAndOptions, callInfo)
	mock.lockGetUniqueDimensionAndOptions.Unlock()
	return mock.GetUniqueDimensionAndOptionsFunc(ctx, ID, dimension)
}

// GetUniqueDimensionAndOptionsCalls gets all the calls that were made to GetUniqueDimensionAndOptions.
// Check the length with:
//
//	len(mockedMongoDB.GetUniqueDimensionAndOptionsCalls())
func (mock *MongoDBMock) GetUniqueDimensionAndOptionsCalls() []struct {
	Ctx       context.Context
	ID        string
	Dimension string
} {
	var calls []struct {
		Ctx       context.Context
		ID        string
		Dimension string
	}
	mock.lockGetUniqueDimensionAndOptions.RLock()
	calls = mock.calls.GetUniqueDimensionAndOptions
	mock.lockGetUniqueDimensionAndOptions.RUnlock()
	return calls
}

// GetV2Dataset calls GetV2DatasetFunc.
func (mock *MongoDBMock) GetV2Dataset(ctx context.Context, authorised bool, id string) (*models.LDDataset, error) {
	if mock.GetV2DatasetFunc == nil {
		panic("MongoDBMock.GetV2DatasetFunc: method is nil but MongoDB.GetV2Dataset was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Authorised bool
		ID         string
	}{
		Ctx:        ctx,
		Authorised: authorised,
		ID:         id,
	}
	mock.lockGetV2Dataset.Lock()
	mock.calls.GetV2Dataset = append(mock.calls.GetV2Dataset, callInfo)
	mock.lockGetV2Dataset.Unlock()
	return mock.GetV2DatasetFunc(ctx, authorised, id)
}

// GetV2DatasetCalls gets all the calls that were made to GetV2Dataset.
// Check the length with:
//
//	len(mockedMongoDB.GetV2DatasetCalls())
func (mock *MongoDBMock) GetV2DatasetCalls() []struct {
	Ctx        context.Context
	Authorised bool
	ID         string
} {
	var calls []struct {
		Ctx        context.Context
		Authorised bool
		ID         string
	}
	mock.lockGetV2Dataset.RLock()
	calls = mock.calls.GetV2Dataset
	mock.lockGetV2Dataset.RUnlock()
	return calls
}

// GetV2Datasets calls GetV2DatasetsFunc.
func (mock *MongoDBMock) GetV2Datasets(ctx context.Context, offset int, limit int, authorised bool) ([]*models.LDDataset, int, error) {
	if mock.GetV2DatasetsFunc == nil {
		panic("MongoDBMock.GetV2DatasetsFunc: method is nil but MongoDB.GetV2Datasets was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Offset     int
		Limit      int
		Authorised bool
	}{
		Ctx:        ctx,
		Offset:     offset,
		Limit:      limit,
		Authorised: authorised,
	}
	mock.lockGetV2Datasets.Lock()
	mock.calls.GetV2Datasets = append(mock.calls.GetV2Datasets, callInfo)
	mock.lockGetV2Datasets.Unlock()
	return mock.GetV2DatasetsFunc(ctx, offset, limit, authorised)
}

// GetV2DatasetsCalls gets all the calls that were made to GetV2Datasets.
// Check the length with:
//
//	len(mockedMongoDB.GetV2DatasetsCalls())
func (mock *MongoDBMock) GetV2DatasetsCalls() []struct {
	Ctx        context.Context
	Offset     int
	Limit      int
	Authorised bool
} {
	var calls []struct {
		Ctx        context.Context
		Offset     int
		Limit      int
		Authorised bool
	}
	mock.lockGetV2Datasets.RLock()
	calls = mock.calls.GetV2Datasets
	mock.lockGetV2Datasets.RUnlock()
	return calls
}

// GetVersion calls GetVersionFunc.
func (mock *MongoDBMock) GetVersion(ctx context.Context, datasetID string, editionID string, version int, state string) (*models.Version, error) {
	if mock.GetVersionFunc == nil {
		panic("MongoDBMock.GetVersionFunc: method is nil but MongoDB.GetVersion was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		DatasetID string
		EditionID string
		Version   int
		State     string
	}{
		Ctx:       ctx,
		DatasetID: datasetID,
		EditionID: editionID,
		Version:   version,
		State:     state,
	}
	mock.lockGetVersion.Lock()
	mock.calls.GetVersion = append(mock.calls.GetVersion, callInfo)
	mock.lockGetVersion.Unlock()
	return mock.GetVersionFunc(ctx, datasetID, editionID, version, state)
}

// GetVersionCalls gets all the calls that were made to GetVersion.
// Check the length with:
//
//	len(mockedMongoDB.GetVersionCalls())
func (mock *MongoDBMock) GetVersionCalls() []struct {
	Ctx       context.Context
	DatasetID string
	EditionID string
	Version   int
	State     string
} {
	var calls []struct {
		Ctx       context.Context
		DatasetID string
		EditionID string
		Version   int
		State     string
	}
	mock.lockGetVersion.RLock()
	calls = mock.calls.GetVersion
	mock.lockGetVersion.RUnlock()
	return calls
}

// GetVersions calls GetVersionsFunc.
func (mock *MongoDBMock) GetVersions(ctx context.Context, datasetID string, editionID string, state string, offset int, limit int) ([]models.Version, int, error) {
	if mock.GetVersionsFunc == nil {
		panic("MongoDBMock.GetVersionsFunc: method is nil but MongoDB.GetVersions was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		DatasetID string
		EditionID string
		State     string
		Offset    int
		Limit     int
	}{
		Ctx:       ctx,
		DatasetID: datasetID,
		EditionID: editionID,
		State:     state,
		Offset:    offset,
		Limit:     limit,
	}
	mock.lockGetVersions.Lock()
	mock.calls.GetVersions = append(mock.calls.GetVersions, callInfo)
	mock.lockGetVersions.Unlock()
	return mock.GetVersionsFunc(ctx, datasetID, editionID, state, offset, limit)
}

// GetVersionsCalls gets all the calls that were made to GetVersions.
// Check the length with:
//
//	len(mockedMongoDB.GetVersionsCalls())
func (mock *MongoDBMock) GetVersionsCalls() []struct {
	Ctx       context.Context
	DatasetID string
	EditionID string
	State     string
	Offset    int
	Limit     int
} {
	var calls []struct {
		Ctx       context.Context
		DatasetID string
		EditionID string
		State     string
		Offset    int
		Limit     int
	}
	mock.lockGetVersions.RLock()
	calls = mock.calls.GetVersions
	mock.lockGetVersions.RUnlock()
	return calls
}

// RemoveDatasetVersionAndEditionLinks calls RemoveDatasetVersionAndEditionLinksFunc.
func (mock *MongoDBMock) RemoveDatasetVersionAndEditionLinks(ctx context.Context, id string) error {
	if mock.RemoveDatasetVersionAndEditionLinksFunc == nil {
		panic("MongoDBMock.RemoveDatasetVersionAndEditionLinksFunc: method is nil but MongoDB.RemoveDatasetVersionAndEditionLinks was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockRemoveDatasetVersionAndEditionLinks.Lock()
	mock.calls.RemoveDatasetVersionAndEditionLinks = append(mock.calls.RemoveDatasetVersionAndEditionLinks, callInfo)
	mock.lockRemoveDatasetVersionAndEditionLinks.Unlock()
	return mock.RemoveDatasetVersionAndEditionLinksFunc(ctx, id)
}

// RemoveDatasetVersionAndEditionLinksCalls gets all the calls that were made to RemoveDatasetVersionAndEditionLinks.
// Check the length with:
//
//	len(mockedMongoDB.RemoveDatasetVersionAndEditionLinksCalls())
func (mock *MongoDBMock) RemoveDatasetVersionAndEditionLinksCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockRemoveDatasetVersionAndEditionLinks.RLock()
	calls = mock.calls.RemoveDatasetVersionAndEditionLinks
	mock.lockRemoveDatasetVersionAndEditionLinks.RUnlock()
	return calls
}

// UnlockInstance calls UnlockInstanceFunc.
func (mock *MongoDBMock) UnlockInstance(ctx context.Context, lockID string) {
	if mock.UnlockInstanceFunc == nil {
		panic("MongoDBMock.UnlockInstanceFunc: method is nil but MongoDB.UnlockInstance was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		LockID string
	}{
		Ctx:    ctx,
		LockID: lockID,
	}
	mock.lockUnlockInstance.Lock()
	mock.calls.UnlockInstance = append(mock.calls.UnlockInstance, callInfo)
	mock.lockUnlockInstance.Unlock()
	mock.UnlockInstanceFunc(ctx, lockID)
}

// UnlockInstanceCalls gets all the calls that were made to UnlockInstance.
// Check the length with:
//
//	len(mockedMongoDB.UnlockInstanceCalls())
func (mock *MongoDBMock) UnlockInstanceCalls() []struct {
	Ctx    context.Context
	LockID string
} {
	var calls []struct {
		Ctx    context.Context
		LockID string
	}
	mock.lockUnlockInstance.RLock()
	calls = mock.calls.UnlockInstance
	mock.lockUnlockInstance.RUnlock()
	return calls
}

// UpdateDataset calls UpdateDatasetFunc.
func (mock *MongoDBMock) UpdateDataset(ctx context.Context, ID string, dataset *models.Dataset, currentState string) error {
	if mock.UpdateDatasetFunc == nil {
		panic("MongoDBMock.UpdateDatasetFunc: method is nil but MongoDB.UpdateDataset was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ID           string
		Dataset      *models.Dataset
		CurrentState string
	}{
		Ctx:          ctx,
		ID:           ID,
		Dataset:      dataset,
		CurrentState: currentState,
	}
	mock.lockUpdateDataset.Lock()
	mock.calls.UpdateDataset = append(mock.calls.UpdateDataset, callInfo)
	mock.lockUpdateDataset.Unlock()
	return mock.UpdateDatasetFunc(ctx, ID, dataset, currentState)
}

// UpdateDatasetCalls gets all the calls that were made to UpdateDataset.
// Check the length with:
//
//	len(mockedMongoDB.UpdateDatasetCalls())
func (mock *MongoDBMock) UpdateDatasetCalls() []struct {
	Ctx          context.Context
	ID           string
	Dataset      *models.Dataset
	CurrentState string
} {
	var calls []struct {
		Ctx          context.Context
		ID           string
		Dataset      *models.Dataset
		CurrentState string
	}
	mock.lockUpdateDataset.RLock()
	calls = mock.calls.UpdateDataset
	mock.lockUpdateDataset.RUnlock()
	return calls
}

// UpdateDatasetWithAssociation calls UpdateDatasetWithAssociationFunc.
func (mock *MongoDBMock) UpdateDatasetWithAssociation(ctx context.Context, ID string, state string, version *models.Version) error {
	if mock.UpdateDatasetWithAssociationFunc == nil {
		panic("MongoDBMock.UpdateDatasetWithAssociationFunc: method is nil but MongoDB.UpdateDatasetWithAssociation was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ID      string
		State   string
		Version *models.Version
	}{
		Ctx:     ctx,
		ID:      ID,
		State:   state,
		Version: version,
	}
	mock.lockUpdateDatasetWithAssociation.Lock()
	mock.calls.UpdateDatasetWithAssociation = append(mock.calls.UpdateDatasetWithAssociation, callInfo)
	mock.lockUpdateDatasetWithAssociation.Unlock()
	return mock.UpdateDatasetWithAssociationFunc(ctx, ID, state, version)
}

// UpdateDatasetWithAssociationCalls gets all the calls that were made to UpdateDatasetWithAssociation.
// Check the length with:
//
//	len(mockedMongoDB.UpdateDatasetWithAssociationCalls())
func (mock *MongoDBMock) UpdateDatasetWithAssociationCalls() []struct {
	Ctx     context.Context
	ID      string
	State   string
	Version *models.Version
} {
	var calls []struct {
		Ctx     context.Context
		ID      string
		State   string
		Version *models.Version
	}
	mock.lockUpdateDatasetWithAssociation.RLock()
	calls = mock.calls.UpdateDatasetWithAssociation
	mock.lockUpdateDatasetWithAssociation.RUnlock()
	return calls
}

// UpdateDimensionsNodeIDAndOrder calls UpdateDimensionsNodeIDAndOrderFunc.
func (mock *MongoDBMock) UpdateDimensionsNodeIDAndOrder(ctx context.Context, updates []*models.DimensionOption) error {
	if mock.UpdateDimensionsNodeIDAndOrderFunc == nil {
		panic("MongoDBMock.UpdateDimensionsNodeIDAndOrderFunc: method is nil but MongoDB.UpdateDimensionsNodeIDAndOrder was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Updates []*models.DimensionOption
	}{
		Ctx:     ctx,
		Updates: updates,
	}
	mock.lockUpdateDimensionsNodeIDAndOrder.Lock()
	mock.calls.UpdateDimensionsNodeIDAndOrder = append(mock.calls.UpdateDimensionsNodeIDAndOrder, callInfo)
	mock.lockUpdateDimensionsNodeIDAndOrder.Unlock()
	return mock.UpdateDimensionsNodeIDAndOrderFunc(ctx, updates)
}

// UpdateDimensionsNodeIDAndOrderCalls gets all the calls that were made to UpdateDimensionsNodeIDAndOrder.
// Check the length with:
//
//	len(mockedMongoDB.UpdateDimensionsNodeIDAndOrderCalls())
func (mock *MongoDBMock) UpdateDimensionsNodeIDAndOrderCalls() []struct {
	Ctx     context.Context
	Updates []*models.DimensionOption
} {
	var calls []struct {
		Ctx     context.Context
		Updates []*models.DimensionOption
	}
	mock.lockUpdateDimensionsNodeIDAndOrder.RLock()
	calls = mock.calls.UpdateDimensionsNodeIDAndOrder
	mock.lockUpdateDimensionsNodeIDAndOrder.RUnlock()
	return calls
}

// UpdateETagForOptions calls UpdateETagForOptionsFunc.
func (mock *MongoDBMock) UpdateETagForOptions(ctx context.Context, currentInstance *models.Instance, upserts []*models.CachedDimensionOption, updates []*models.DimensionOption, eTagSelector string) (string, error) {
	if mock.UpdateETagForOptionsFunc == nil {
		panic("MongoDBMock.UpdateETagForOptionsFunc: method is nil but MongoDB.UpdateETagForOptions was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		CurrentInstance *models.Instance
		Upserts         []*models.CachedDimensionOption
		Updates         []*models.DimensionOption
		ETagSelector    string
	}{
		Ctx:             ctx,
		CurrentInstance: currentInstance,
		Upserts:         upserts,
		Updates:         updates,
		ETagSelector:    eTagSelector,
	}
	mock.lockUpdateETagForOptions.Lock()
	mock.calls.UpdateETagForOptions = append(mock.calls.UpdateETagForOptions, callInfo)
	mock.lockUpdateETagForOptions.Unlock()
	return mock.UpdateETagForOptionsFunc(ctx, currentInstance, upserts, updates, eTagSelector)
}

// UpdateETagForOptionsCalls gets all the calls that were made to UpdateETagForOptions.
// Check the length with:
//
//	len(mockedMongoDB.UpdateETagForOptionsCalls())
func (mock *MongoDBMock) UpdateETagForOptionsCalls() []struct {
	Ctx             context.Context
	CurrentInstance *models.Instance
	Upserts         []*models.CachedDimensionOption
	Updates         []*models.DimensionOption
	ETagSelector    string
} {
	var calls []struct {
		Ctx             context.Context
		CurrentInstance *models.Instance
		Upserts         []*models.CachedDimensionOption
		Updates         []*models.DimensionOption
		ETagSelector    string
	}
	mock.lockUpdateETagForOptions.RLock()
	calls = mock.calls.UpdateETagForOptions
	mock.lockUpdateETagForOptions.RUnlock()
	return calls
}

// UpdateInstance calls UpdateInstanceFunc.
func (mock *MongoDBMock) UpdateInstance(ctx context.Context, currentInstance *models.Instance, updatedInstance *models.Instance, eTagSelector string) (string, error) {
	if mock.UpdateInstanceFunc == nil {
		panic("MongoDBMock.UpdateInstanceFunc: method is nil but MongoDB.UpdateInstance was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		CurrentInstance *models.Instance
		UpdatedInstance *models.Instance
		ETagSelector    string
	}{
		Ctx:             ctx,
		CurrentInstance: currentInstance,
		UpdatedInstance: updatedInstance,
		ETagSelector:    eTagSelector,
	}
	mock.lockUpdateInstance.Lock()
	mock.calls.UpdateInstance = append(mock.calls.UpdateInstance, callInfo)
	mock.lockUpdateInstance.Unlock()
	return mock.UpdateInstanceFunc(ctx, currentInstance, updatedInstance, eTagSelector)
}

// UpdateInstanceCalls gets all the calls that were made to UpdateInstance.
// Check the length with:
//
//	len(mockedMongoDB.UpdateInstanceCalls())
func (mock *MongoDBMock) UpdateInstanceCalls() []struct {
	Ctx             context.Context
	CurrentInstance *models.Instance
	UpdatedInstance *models.Instance
	ETagSelector    string
} {
	var calls []struct {
		Ctx             context.Context
		CurrentInstance *models.Instance
		UpdatedInstance *models.Instance
		ETagSelector    string
	}
	mock.lockUpdateInstance.RLock()
	calls = mock.calls.UpdateInstance
	mock.lockUpdateInstance.RUnlock()
	return calls
}

// UpdateVersion calls UpdateVersionFunc.
func (mock *MongoDBMock) UpdateVersion(ctx context.Context, currentVersion *models.Version, version *models.Version, eTagSelector string) (string, error) {
	if mock.UpdateVersionFunc == nil {
		panic("MongoDBMock.UpdateVersionFunc: method is nil but MongoDB.UpdateVersion was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		CurrentVersion *models.Version
		Version        *models.Version
		ETagSelector   string
	}{
		Ctx:            ctx,
		CurrentVersion: currentVersion,
		Version:        version,
		ETagSelector:   eTagSelector,
	}
	mock.lockUpdateVersion.Lock()
	mock.calls.UpdateVersion = append(mock.calls.UpdateVersion, callInfo)
	mock.lockUpdateVersion.Unlock()
	return mock.UpdateVersionFunc(ctx, currentVersion, version, eTagSelector)
}

// UpdateVersionCalls gets all the calls that were made to UpdateVersion.
// Check the length with:
//
//	len(mockedMongoDB.UpdateVersionCalls())
func (mock *MongoDBMock) UpdateVersionCalls() []struct {
	Ctx            context.Context
	CurrentVersion *models.Version
	Version        *models.Version
	ETagSelector   string
} {
	var calls []struct {
		Ctx            context.Context
		CurrentVersion *models.Version
		Version        *models.Version
		ETagSelector   string
	}
	mock.lockUpdateVersion.RLock()
	calls = mock.calls.UpdateVersion
	mock.lockUpdateVersion.RUnlock()
	return calls
}

// UpsertContact calls UpsertContactFunc.
func (mock *MongoDBMock) UpsertContact(ctx context.Context, ID string, update interface{}) error {
	if mock.UpsertContactFunc == nil {
		panic("MongoDBMock.UpsertContactFunc: method is nil but MongoDB.UpsertContact was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ID     string
		Update interface{}
	}{
		Ctx:    ctx,
		ID:     ID,
		Update: update,
	}
	mock.lockUpsertContact.Lock()
	mock.calls.UpsertContact = append(mock.calls.UpsertContact, callInfo)
	mock.lockUpsertContact.Unlock()
	return mock.UpsertContactFunc(ctx, ID, update)
}

// UpsertContactCalls gets all the calls that were made to UpsertContact.
// Check the length with:
//
//	len(mockedMongoDB.UpsertContactCalls())
func (mock *MongoDBMock) UpsertContactCalls() []struct {
	Ctx    context.Context
	ID     string
	Update interface{}
} {
	var calls []struct {
		Ctx    context.Context
		ID     string
		Update interface{}
	}
	mock.lockUpsertContact.RLock()
	calls = mock.calls.UpsertContact
	mock.lockUpsertContact.RUnlock()
	return calls
}

// UpsertDataset calls UpsertDatasetFunc.
func (mock *MongoDBMock) UpsertDataset(ctx context.Context, ID string, datasetDoc *models.DatasetUpdate) error {
	if mock.UpsertDatasetFunc == nil {
		panic("MongoDBMock.UpsertDatasetFunc: method is nil but MongoDB.UpsertDataset was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ID         string
		DatasetDoc *models.DatasetUpdate
	}{
		Ctx:        ctx,
		ID:         ID,
		DatasetDoc: datasetDoc,
	}
	mock.lockUpsertDataset.Lock()
	mock.calls.UpsertDataset = append(mock.calls.UpsertDataset, callInfo)
	mock.lockUpsertDataset.Unlock()
	return mock.UpsertDatasetFunc(ctx, ID, datasetDoc)
}

// UpsertDatasetCalls gets all the calls that were made to UpsertDataset.
// Check the length with:
//
//	len(mockedMongoDB.UpsertDatasetCalls())
func (mock *MongoDBMock) UpsertDatasetCalls() []struct {
	Ctx        context.Context
	ID         string
	DatasetDoc *models.DatasetUpdate
} {
	var calls []struct {
		Ctx        context.Context
		ID         string
		DatasetDoc *models.DatasetUpdate
	}
	mock.lockUpsertDataset.RLock()
	calls = mock.calls.UpsertDataset
	mock.lockUpsertDataset.RUnlock()
	return calls
}

// UpsertDimensionsToInstance calls UpsertDimensionsToInstanceFunc.
func (mock *MongoDBMock) UpsertDimensionsToInstance(ctx context.Context, dimensions []*models.CachedDimensionOption) error {
	if mock.UpsertDimensionsToInstanceFunc == nil {
		panic("MongoDBMock.UpsertDimensionsToInstanceFunc: method is nil but MongoDB.UpsertDimensionsToInstance was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Dimensions []*models.CachedDimensionOption
	}{
		Ctx:        ctx,
		Dimensions: dimensions,
	}
	mock.lockUpsertDimensionsToInstance.Lock()
	mock.calls.UpsertDimensionsToInstance = append(mock.calls.UpsertDimensionsToInstance, callInfo)
	mock.lockUpsertDimensionsToInstance.Unlock()
	return mock.UpsertDimensionsToInstanceFunc(ctx, dimensions)
}

// UpsertDimensionsToInstanceCalls gets all the calls that were made to UpsertDimensionsToInstance.
// Check the length with:
//
//	len(mockedMongoDB.UpsertDimensionsToInstanceCalls())
func (mock *MongoDBMock) UpsertDimensionsToInstanceCalls() []struct {
	Ctx        context.Context
	Dimensions []*models.CachedDimensionOption
} {
	var calls []struct {
		Ctx        context.Context
		Dimensions []*models.CachedDimensionOption
	}
	mock.lockUpsertDimensionsToInstance.RLock()
	calls = mock.calls.UpsertDimensionsToInstance
	mock.lockUpsertDimensionsToInstance.RUnlock()
	return calls
}

// UpsertEdition calls UpsertEditionFunc.
func (mock *MongoDBMock) UpsertEdition(ctx context.Context, datasetID string, edition string, editionDoc *models.EditionUpdate) error {
	if mock.UpsertEditionFunc == nil {
		panic("MongoDBMock.UpsertEditionFunc: method is nil but MongoDB.UpsertEdition was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		DatasetID  string
		Edition    string
		EditionDoc *models.EditionUpdate
	}{
		Ctx:        ctx,
		DatasetID:  datasetID,
		Edition:    edition,
		EditionDoc: editionDoc,
	}
	mock.lockUpsertEdition.Lock()
	mock.calls.UpsertEdition = append(mock.calls.UpsertEdition, callInfo)
	mock.lockUpsertEdition.Unlock()
	return mock.UpsertEditionFunc(ctx, datasetID, edition, editionDoc)
}

// UpsertEditionCalls gets all the calls that were made to UpsertEdition.
// Check the length with:
//
//	len(mockedMongoDB.UpsertEditionCalls())
func (mock *MongoDBMock) UpsertEditionCalls() []struct {
	Ctx        context.Context
	DatasetID  string
	Edition    string
	EditionDoc *models.EditionUpdate
} {
	var calls []struct {
		Ctx        context.Context
		DatasetID  string
		Edition    string
		EditionDoc *models.EditionUpdate
	}
	mock.lockUpsertEdition.RLock()
	calls = mock.calls.UpsertEdition
	mock.lockUpsertEdition.RUnlock()
	return calls
}

// UpsertLDDataset calls UpsertLDDatasetFunc.
func (mock *MongoDBMock) UpsertLDDataset(ctx context.Context, ID string, datasetDoc *models.LDDataset) error {
	if mock.UpsertLDDatasetFunc == nil {
		panic("MongoDBMock.UpsertLDDatasetFunc: method is nil but MongoDB.UpsertLDDataset was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ID         string
		DatasetDoc *models.LDDataset
	}{
		Ctx:        ctx,
		ID:         ID,
		DatasetDoc: datasetDoc,
	}
	mock.lockUpsertLDDataset.Lock()
	mock.calls.UpsertLDDataset = append(mock.calls.UpsertLDDataset, callInfo)
	mock.lockUpsertLDDataset.Unlock()
	return mock.UpsertLDDatasetFunc(ctx, ID, datasetDoc)
}

// UpsertLDDatasetCalls gets all the calls that were made to UpsertLDDataset.
// Check the length with:
//
//	len(mockedMongoDB.UpsertLDDatasetCalls())
func (mock *MongoDBMock) UpsertLDDatasetCalls() []struct {
	Ctx        context.Context
	ID         string
	DatasetDoc *models.LDDataset
} {
	var calls []struct {
		Ctx        context.Context
		ID         string
		DatasetDoc *models.LDDataset
	}
	mock.lockUpsertLDDataset.RLock()
	calls = mock.calls.UpsertLDDataset
	mock.lockUpsertLDDataset.RUnlock()
	return calls
}

// UpsertVersion calls UpsertVersionFunc.
func (mock *MongoDBMock) UpsertVersion(ctx context.Context, ID string, versionDoc *models.Version) error {
	if mock.UpsertVersionFunc == nil {
		panic("MongoDBMock.UpsertVersionFunc: method is nil but MongoDB.UpsertVersion was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ID         string
		VersionDoc *models.Version
	}{
		Ctx:        ctx,
		ID:         ID,
		VersionDoc: versionDoc,
	}
	mock.lockUpsertVersion.Lock()
	mock.calls.UpsertVersion = append(mock.calls.UpsertVersion, callInfo)
	mock.lockUpsertVersion.Unlock()
	return mock.UpsertVersionFunc(ctx, ID, versionDoc)
}

// UpsertVersionCalls gets all the calls that were made to UpsertVersion.
// Check the length with:
//
//	len(mockedMongoDB.UpsertVersionCalls())
func (mock *MongoDBMock) UpsertVersionCalls() []struct {
	Ctx        context.Context
	ID         string
	VersionDoc *models.Version
} {
	var calls []struct {
		Ctx        context.Context
		ID         string
		VersionDoc *models.Version
	}
	mock.lockUpsertVersion.RLock()
	calls = mock.calls.UpsertVersion
	mock.lockUpsertVersion.RUnlock()
	return calls
}
