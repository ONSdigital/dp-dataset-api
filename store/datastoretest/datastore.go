// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storetest

import (
	"context"
	"github.com/ONSdigital/dp-dataset-api/models"
	"github.com/ONSdigital/dp-dataset-api/store"
	"github.com/globalsign/mgo/bson"
	"sync"
)

// Ensure, that StorerMock does implement store.Storer.
// If this is not the case, regenerate this file with moq.
var _ store.Storer = &StorerMock{}

// StorerMock is a mock implementation of store.Storer.
//
// 	func TestSomethingThatUsesStorer(t *testing.T) {
//
// 		// make and configure a mocked store.Storer
// 		mockedStorer := &StorerMock{
// 			AcquireInstanceLockFunc: func(ctx context.Context, instanceID string) (string, error) {
// 				panic("mock out the AcquireInstanceLock method")
// 			},
// 			AddEventToInstanceFunc: func(currentInstance *models.Instance, event *models.Event, eTagSelector string) (string, error) {
// 				panic("mock out the AddEventToInstance method")
// 			},
// 			AddInstanceFunc: func(instance *models.Instance) (*models.Instance, error) {
// 				panic("mock out the AddInstance method")
// 			},
// 			AddVersionDetailsToInstanceFunc: func(ctx context.Context, instanceID string, datasetID string, edition string, version int) error {
// 				panic("mock out the AddVersionDetailsToInstance method")
// 			},
// 			CheckDatasetExistsFunc: func(ID string, state string) error {
// 				panic("mock out the CheckDatasetExists method")
// 			},
// 			CheckEditionExistsFunc: func(ID string, editionID string, state string) error {
// 				panic("mock out the CheckEditionExists method")
// 			},
// 			DeleteDatasetFunc: func(ID string) error {
// 				panic("mock out the DeleteDataset method")
// 			},
// 			DeleteEditionFunc: func(ID string) error {
// 				panic("mock out the DeleteEdition method")
// 			},
// 			GetDatasetFunc: func(ID string) (*models.DatasetUpdate, error) {
// 				panic("mock out the GetDataset method")
// 			},
// 			GetDatasetsFunc: func(ctx context.Context, offset int, limit int, authorised bool) ([]*models.DatasetUpdate, int, error) {
// 				panic("mock out the GetDatasets method")
// 			},
// 			GetDimensionOptionsFunc: func(ctx context.Context, version *models.Version, dimension string, offset int, limit int) ([]*models.PublicDimensionOption, int, error) {
// 				panic("mock out the GetDimensionOptions method")
// 			},
// 			GetDimensionOptionsFromIDsFunc: func(version *models.Version, dimension string, ids []string) ([]*models.PublicDimensionOption, int, error) {
// 				panic("mock out the GetDimensionOptionsFromIDs method")
// 			},
// 			GetDimensionsFunc: func(versionID string) ([]bson.M, error) {
// 				panic("mock out the GetDimensions method")
// 			},
// 			GetDimensionsFromInstanceFunc: func(ctx context.Context, ID string, offset int, limit int) ([]*models.DimensionOption, int, error) {
// 				panic("mock out the GetDimensionsFromInstance method")
// 			},
// 			GetEditionFunc: func(ID string, editionID string, state string) (*models.EditionUpdate, error) {
// 				panic("mock out the GetEdition method")
// 			},
// 			GetEditionsFunc: func(ctx context.Context, ID string, state string, offset int, limit int, authorised bool) ([]*models.EditionUpdate, int, error) {
// 				panic("mock out the GetEditions method")
// 			},
// 			GetInstanceFunc: func(ID string, eTagSelector string) (*models.Instance, error) {
// 				panic("mock out the GetInstance method")
// 			},
// 			GetInstancesFunc: func(ctx context.Context, states []string, datasets []string, offset int, limit int) ([]*models.Instance, int, error) {
// 				panic("mock out the GetInstances method")
// 			},
// 			GetNextVersionFunc: func(datasetID string, editionID string) (int, error) {
// 				panic("mock out the GetNextVersion method")
// 			},
// 			GetUniqueDimensionAndOptionsFunc: func(ID string, dimension string) ([]*string, int, error) {
// 				panic("mock out the GetUniqueDimensionAndOptions method")
// 			},
// 			GetVersionFunc: func(datasetID string, editionID string, version int, state string) (*models.Version, error) {
// 				panic("mock out the GetVersion method")
// 			},
// 			GetVersionsFunc: func(ctx context.Context, datasetID string, editionID string, state string, offset int, limit int) ([]models.Version, int, error) {
// 				panic("mock out the GetVersions method")
// 			},
// 			RemoveDatasetVersionAndEditionLinksFunc: func(id string) error {
// 				panic("mock out the RemoveDatasetVersionAndEditionLinks method")
// 			},
// 			SetInstanceIsPublishedFunc: func(ctx context.Context, instanceID string) error {
// 				panic("mock out the SetInstanceIsPublished method")
// 			},
// 			UnlockInstanceFunc: func(lockID string)  {
// 				panic("mock out the UnlockInstance method")
// 			},
// 			UpdateBuildHierarchyTaskStateFunc: func(currentInstance *models.Instance, dimension string, state string, eTagSelector string) (string, error) {
// 				panic("mock out the UpdateBuildHierarchyTaskState method")
// 			},
// 			UpdateBuildSearchTaskStateFunc: func(currentInstance *models.Instance, dimension string, state string, eTagSelector string) (string, error) {
// 				panic("mock out the UpdateBuildSearchTaskState method")
// 			},
// 			UpdateDatasetFunc: func(ctx context.Context, ID string, dataset *models.Dataset, currentState string) error {
// 				panic("mock out the UpdateDataset method")
// 			},
// 			UpdateDatasetWithAssociationFunc: func(ID string, state string, version *models.Version) error {
// 				panic("mock out the UpdateDatasetWithAssociation method")
// 			},
// 			UpdateDimensionsNodeIDAndOrderFunc: func(updates []*models.DimensionOption) error {
// 				panic("mock out the UpdateDimensionsNodeIDAndOrder method")
// 			},
// 			UpdateETagForOptionsFunc: func(currentInstance *models.Instance, upserts []*models.CachedDimensionOption, updates []*models.DimensionOption, eTagSelector string) (string, error) {
// 				panic("mock out the UpdateETagForOptions method")
// 			},
// 			UpdateImportObservationsTaskStateFunc: func(currentInstance *models.Instance, state string, eTagSelector string) (string, error) {
// 				panic("mock out the UpdateImportObservationsTaskState method")
// 			},
// 			UpdateInstanceFunc: func(ctx context.Context, currentInstance *models.Instance, updatedInstance *models.Instance, eTagSelector string) (string, error) {
// 				panic("mock out the UpdateInstance method")
// 			},
// 			UpdateObservationInsertedFunc: func(currentInstance *models.Instance, observationInserted int64, eTagSelector string) (string, error) {
// 				panic("mock out the UpdateObservationInserted method")
// 			},
// 			UpdateVersionFunc: func(ID string, version *models.Version) error {
// 				panic("mock out the UpdateVersion method")
// 			},
// 			UpsertContactFunc: func(ID string, update interface{}) error {
// 				panic("mock out the UpsertContact method")
// 			},
// 			UpsertDatasetFunc: func(ID string, datasetDoc *models.DatasetUpdate) error {
// 				panic("mock out the UpsertDataset method")
// 			},
// 			UpsertDimensionsToInstanceFunc: func(dimensions []*models.CachedDimensionOption) error {
// 				panic("mock out the UpsertDimensionsToInstance method")
// 			},
// 			UpsertEditionFunc: func(datasetID string, edition string, editionDoc *models.EditionUpdate) error {
// 				panic("mock out the UpsertEdition method")
// 			},
// 			UpsertVersionFunc: func(ID string, versionDoc *models.Version) error {
// 				panic("mock out the UpsertVersion method")
// 			},
// 		}
//
// 		// use mockedStorer in code that requires store.Storer
// 		// and then make assertions.
//
// 	}
type StorerMock struct {
	// AcquireInstanceLockFunc mocks the AcquireInstanceLock method.
	AcquireInstanceLockFunc func(ctx context.Context, instanceID string) (string, error)

	// AddEventToInstanceFunc mocks the AddEventToInstance method.
	AddEventToInstanceFunc func(currentInstance *models.Instance, event *models.Event, eTagSelector string) (string, error)

	// AddInstanceFunc mocks the AddInstance method.
	AddInstanceFunc func(instance *models.Instance) (*models.Instance, error)

	// AddVersionDetailsToInstanceFunc mocks the AddVersionDetailsToInstance method.
	AddVersionDetailsToInstanceFunc func(ctx context.Context, instanceID string, datasetID string, edition string, version int) error

	// CheckDatasetExistsFunc mocks the CheckDatasetExists method.
	CheckDatasetExistsFunc func(ID string, state string) error

	// CheckEditionExistsFunc mocks the CheckEditionExists method.
	CheckEditionExistsFunc func(ID string, editionID string, state string) error

	// DeleteDatasetFunc mocks the DeleteDataset method.
	DeleteDatasetFunc func(ID string) error

	// DeleteEditionFunc mocks the DeleteEdition method.
	DeleteEditionFunc func(ID string) error

	// GetDatasetFunc mocks the GetDataset method.
	GetDatasetFunc func(ID string) (*models.DatasetUpdate, error)

	// GetDatasetsFunc mocks the GetDatasets method.
	GetDatasetsFunc func(ctx context.Context, offset int, limit int, authorised bool) ([]*models.DatasetUpdate, int, error)

	// GetDimensionOptionsFunc mocks the GetDimensionOptions method.
	GetDimensionOptionsFunc func(ctx context.Context, version *models.Version, dimension string, offset int, limit int) ([]*models.PublicDimensionOption, int, error)

	// GetDimensionOptionsFromIDsFunc mocks the GetDimensionOptionsFromIDs method.
	GetDimensionOptionsFromIDsFunc func(version *models.Version, dimension string, ids []string) ([]*models.PublicDimensionOption, int, error)

	// GetDimensionsFunc mocks the GetDimensions method.
	GetDimensionsFunc func(versionID string) ([]bson.M, error)

	// GetDimensionsFromInstanceFunc mocks the GetDimensionsFromInstance method.
	GetDimensionsFromInstanceFunc func(ctx context.Context, ID string, offset int, limit int) ([]*models.DimensionOption, int, error)

	// GetEditionFunc mocks the GetEdition method.
	GetEditionFunc func(ID string, editionID string, state string) (*models.EditionUpdate, error)

	// GetEditionsFunc mocks the GetEditions method.
	GetEditionsFunc func(ctx context.Context, ID string, state string, offset int, limit int, authorised bool) ([]*models.EditionUpdate, int, error)

	// GetInstanceFunc mocks the GetInstance method.
	GetInstanceFunc func(ID string, eTagSelector string) (*models.Instance, error)

	// GetInstancesFunc mocks the GetInstances method.
	GetInstancesFunc func(ctx context.Context, states []string, datasets []string, offset int, limit int) ([]*models.Instance, int, error)

	// GetNextVersionFunc mocks the GetNextVersion method.
	GetNextVersionFunc func(datasetID string, editionID string) (int, error)

	// GetUniqueDimensionAndOptionsFunc mocks the GetUniqueDimensionAndOptions method.
	GetUniqueDimensionAndOptionsFunc func(ID string, dimension string) ([]*string, int, error)

	// GetVersionFunc mocks the GetVersion method.
	GetVersionFunc func(datasetID string, editionID string, version int, state string) (*models.Version, error)

	// GetVersionsFunc mocks the GetVersions method.
	GetVersionsFunc func(ctx context.Context, datasetID string, editionID string, state string, offset int, limit int) ([]models.Version, int, error)

	// RemoveDatasetVersionAndEditionLinksFunc mocks the RemoveDatasetVersionAndEditionLinks method.
	RemoveDatasetVersionAndEditionLinksFunc func(id string) error

	// SetInstanceIsPublishedFunc mocks the SetInstanceIsPublished method.
	SetInstanceIsPublishedFunc func(ctx context.Context, instanceID string) error

	// UnlockInstanceFunc mocks the UnlockInstance method.
	UnlockInstanceFunc func(lockID string)

	// UpdateBuildHierarchyTaskStateFunc mocks the UpdateBuildHierarchyTaskState method.
	UpdateBuildHierarchyTaskStateFunc func(currentInstance *models.Instance, dimension string, state string, eTagSelector string) (string, error)

	// UpdateBuildSearchTaskStateFunc mocks the UpdateBuildSearchTaskState method.
	UpdateBuildSearchTaskStateFunc func(currentInstance *models.Instance, dimension string, state string, eTagSelector string) (string, error)

	// UpdateDatasetFunc mocks the UpdateDataset method.
	UpdateDatasetFunc func(ctx context.Context, ID string, dataset *models.Dataset, currentState string) error

	// UpdateDatasetWithAssociationFunc mocks the UpdateDatasetWithAssociation method.
	UpdateDatasetWithAssociationFunc func(ID string, state string, version *models.Version) error

	// UpdateDimensionsNodeIDAndOrderFunc mocks the UpdateDimensionsNodeIDAndOrder method.
	UpdateDimensionsNodeIDAndOrderFunc func(updates []*models.DimensionOption) error

	// UpdateETagForOptionsFunc mocks the UpdateETagForOptions method.
	UpdateETagForOptionsFunc func(currentInstance *models.Instance, upserts []*models.CachedDimensionOption, updates []*models.DimensionOption, eTagSelector string) (string, error)

	// UpdateImportObservationsTaskStateFunc mocks the UpdateImportObservationsTaskState method.
	UpdateImportObservationsTaskStateFunc func(currentInstance *models.Instance, state string, eTagSelector string) (string, error)

	// UpdateInstanceFunc mocks the UpdateInstance method.
	UpdateInstanceFunc func(ctx context.Context, currentInstance *models.Instance, updatedInstance *models.Instance, eTagSelector string) (string, error)

	// UpdateObservationInsertedFunc mocks the UpdateObservationInserted method.
	UpdateObservationInsertedFunc func(currentInstance *models.Instance, observationInserted int64, eTagSelector string) (string, error)

	// UpdateVersionFunc mocks the UpdateVersion method.
	UpdateVersionFunc func(ID string, version *models.Version) error

	// UpsertContactFunc mocks the UpsertContact method.
	UpsertContactFunc func(ID string, update interface{}) error

	// UpsertDatasetFunc mocks the UpsertDataset method.
	UpsertDatasetFunc func(ID string, datasetDoc *models.DatasetUpdate) error

	// UpsertDimensionsToInstanceFunc mocks the UpsertDimensionsToInstance method.
	UpsertDimensionsToInstanceFunc func(dimensions []*models.CachedDimensionOption) error

	// UpsertEditionFunc mocks the UpsertEdition method.
	UpsertEditionFunc func(datasetID string, edition string, editionDoc *models.EditionUpdate) error

	// UpsertVersionFunc mocks the UpsertVersion method.
	UpsertVersionFunc func(ID string, versionDoc *models.Version) error

	// calls tracks calls to the methods.
	calls struct {
		// AcquireInstanceLock holds details about calls to the AcquireInstanceLock method.
		AcquireInstanceLock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
		}
		// AddEventToInstance holds details about calls to the AddEventToInstance method.
		AddEventToInstance []struct {
			// CurrentInstance is the currentInstance argument value.
			CurrentInstance *models.Instance
			// Event is the event argument value.
			Event *models.Event
			// ETagSelector is the eTagSelector argument value.
			ETagSelector string
		}
		// AddInstance holds details about calls to the AddInstance method.
		AddInstance []struct {
			// Instance is the instance argument value.
			Instance *models.Instance
		}
		// AddVersionDetailsToInstance holds details about calls to the AddVersionDetailsToInstance method.
		AddVersionDetailsToInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// DatasetID is the datasetID argument value.
			DatasetID string
			// Edition is the edition argument value.
			Edition string
			// Version is the version argument value.
			Version int
		}
		// CheckDatasetExists holds details about calls to the CheckDatasetExists method.
		CheckDatasetExists []struct {
			// ID is the ID argument value.
			ID string
			// State is the state argument value.
			State string
		}
		// CheckEditionExists holds details about calls to the CheckEditionExists method.
		CheckEditionExists []struct {
			// ID is the ID argument value.
			ID string
			// EditionID is the editionID argument value.
			EditionID string
			// State is the state argument value.
			State string
		}
		// DeleteDataset holds details about calls to the DeleteDataset method.
		DeleteDataset []struct {
			// ID is the ID argument value.
			ID string
		}
		// DeleteEdition holds details about calls to the DeleteEdition method.
		DeleteEdition []struct {
			// ID is the ID argument value.
			ID string
		}
		// GetDataset holds details about calls to the GetDataset method.
		GetDataset []struct {
			// ID is the ID argument value.
			ID string
		}
		// GetDatasets holds details about calls to the GetDatasets method.
		GetDatasets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
			// Authorised is the authorised argument value.
			Authorised bool
		}
		// GetDimensionOptions holds details about calls to the GetDimensionOptions method.
		GetDimensionOptions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Version is the version argument value.
			Version *models.Version
			// Dimension is the dimension argument value.
			Dimension string
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
		}
		// GetDimensionOptionsFromIDs holds details about calls to the GetDimensionOptionsFromIDs method.
		GetDimensionOptionsFromIDs []struct {
			// Version is the version argument value.
			Version *models.Version
			// Dimension is the dimension argument value.
			Dimension string
			// Ids is the ids argument value.
			Ids []string
		}
		// GetDimensions holds details about calls to the GetDimensions method.
		GetDimensions []struct {
			// VersionID is the versionID argument value.
			VersionID string
		}
		// GetDimensionsFromInstance holds details about calls to the GetDimensionsFromInstance method.
		GetDimensionsFromInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
		}
		// GetEdition holds details about calls to the GetEdition method.
		GetEdition []struct {
			// ID is the ID argument value.
			ID string
			// EditionID is the editionID argument value.
			EditionID string
			// State is the state argument value.
			State string
		}
		// GetEditions holds details about calls to the GetEditions method.
		GetEditions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
			// State is the state argument value.
			State string
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
			// Authorised is the authorised argument value.
			Authorised bool
		}
		// GetInstance holds details about calls to the GetInstance method.
		GetInstance []struct {
			// ID is the ID argument value.
			ID string
			// ETagSelector is the eTagSelector argument value.
			ETagSelector string
		}
		// GetInstances holds details about calls to the GetInstances method.
		GetInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// States is the states argument value.
			States []string
			// Datasets is the datasets argument value.
			Datasets []string
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
		}
		// GetNextVersion holds details about calls to the GetNextVersion method.
		GetNextVersion []struct {
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
		}
		// GetUniqueDimensionAndOptions holds details about calls to the GetUniqueDimensionAndOptions method.
		GetUniqueDimensionAndOptions []struct {
			// ID is the ID argument value.
			ID string
			// Dimension is the dimension argument value.
			Dimension string
		}
		// GetVersion holds details about calls to the GetVersion method.
		GetVersion []struct {
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
			// Version is the version argument value.
			Version int
			// State is the state argument value.
			State string
		}
		// GetVersions holds details about calls to the GetVersions method.
		GetVersions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
			// State is the state argument value.
			State string
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
		}
		// RemoveDatasetVersionAndEditionLinks holds details about calls to the RemoveDatasetVersionAndEditionLinks method.
		RemoveDatasetVersionAndEditionLinks []struct {
			// ID is the id argument value.
			ID string
		}
		// SetInstanceIsPublished holds details about calls to the SetInstanceIsPublished method.
		SetInstanceIsPublished []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
		}
		// UnlockInstance holds details about calls to the UnlockInstance method.
		UnlockInstance []struct {
			// LockID is the lockID argument value.
			LockID string
		}
		// UpdateBuildHierarchyTaskState holds details about calls to the UpdateBuildHierarchyTaskState method.
		UpdateBuildHierarchyTaskState []struct {
			// CurrentInstance is the currentInstance argument value.
			CurrentInstance *models.Instance
			// Dimension is the dimension argument value.
			Dimension string
			// State is the state argument value.
			State string
			// ETagSelector is the eTagSelector argument value.
			ETagSelector string
		}
		// UpdateBuildSearchTaskState holds details about calls to the UpdateBuildSearchTaskState method.
		UpdateBuildSearchTaskState []struct {
			// CurrentInstance is the currentInstance argument value.
			CurrentInstance *models.Instance
			// Dimension is the dimension argument value.
			Dimension string
			// State is the state argument value.
			State string
			// ETagSelector is the eTagSelector argument value.
			ETagSelector string
		}
		// UpdateDataset holds details about calls to the UpdateDataset method.
		UpdateDataset []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
			// Dataset is the dataset argument value.
			Dataset *models.Dataset
			// CurrentState is the currentState argument value.
			CurrentState string
		}
		// UpdateDatasetWithAssociation holds details about calls to the UpdateDatasetWithAssociation method.
		UpdateDatasetWithAssociation []struct {
			// ID is the ID argument value.
			ID string
			// State is the state argument value.
			State string
			// Version is the version argument value.
			Version *models.Version
		}
		// UpdateDimensionsNodeIDAndOrder holds details about calls to the UpdateDimensionsNodeIDAndOrder method.
		UpdateDimensionsNodeIDAndOrder []struct {
			// Updates is the updates argument value.
			Updates []*models.DimensionOption
		}
		// UpdateETagForOptions holds details about calls to the UpdateETagForOptions method.
		UpdateETagForOptions []struct {
			// CurrentInstance is the currentInstance argument value.
			CurrentInstance *models.Instance
			// Upserts is the upserts argument value.
			Upserts []*models.CachedDimensionOption
			// Updates is the updates argument value.
			Updates []*models.DimensionOption
			// ETagSelector is the eTagSelector argument value.
			ETagSelector string
		}
		// UpdateImportObservationsTaskState holds details about calls to the UpdateImportObservationsTaskState method.
		UpdateImportObservationsTaskState []struct {
			// CurrentInstance is the currentInstance argument value.
			CurrentInstance *models.Instance
			// State is the state argument value.
			State string
			// ETagSelector is the eTagSelector argument value.
			ETagSelector string
		}
		// UpdateInstance holds details about calls to the UpdateInstance method.
		UpdateInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CurrentInstance is the currentInstance argument value.
			CurrentInstance *models.Instance
			// UpdatedInstance is the updatedInstance argument value.
			UpdatedInstance *models.Instance
			// ETagSelector is the eTagSelector argument value.
			ETagSelector string
		}
		// UpdateObservationInserted holds details about calls to the UpdateObservationInserted method.
		UpdateObservationInserted []struct {
			// CurrentInstance is the currentInstance argument value.
			CurrentInstance *models.Instance
			// ObservationInserted is the observationInserted argument value.
			ObservationInserted int64
			// ETagSelector is the eTagSelector argument value.
			ETagSelector string
		}
		// UpdateVersion holds details about calls to the UpdateVersion method.
		UpdateVersion []struct {
			// ID is the ID argument value.
			ID string
			// Version is the version argument value.
			Version *models.Version
		}
		// UpsertContact holds details about calls to the UpsertContact method.
		UpsertContact []struct {
			// ID is the ID argument value.
			ID string
			// Update is the update argument value.
			Update interface{}
		}
		// UpsertDataset holds details about calls to the UpsertDataset method.
		UpsertDataset []struct {
			// ID is the ID argument value.
			ID string
			// DatasetDoc is the datasetDoc argument value.
			DatasetDoc *models.DatasetUpdate
		}
		// UpsertDimensionsToInstance holds details about calls to the UpsertDimensionsToInstance method.
		UpsertDimensionsToInstance []struct {
			// Dimensions is the dimensions argument value.
			Dimensions []*models.CachedDimensionOption
		}
		// UpsertEdition holds details about calls to the UpsertEdition method.
		UpsertEdition []struct {
			// DatasetID is the datasetID argument value.
			DatasetID string
			// Edition is the edition argument value.
			Edition string
			// EditionDoc is the editionDoc argument value.
			EditionDoc *models.EditionUpdate
		}
		// UpsertVersion holds details about calls to the UpsertVersion method.
		UpsertVersion []struct {
			// ID is the ID argument value.
			ID string
			// VersionDoc is the versionDoc argument value.
			VersionDoc *models.Version
		}
	}
	lockAcquireInstanceLock                 sync.RWMutex
	lockAddEventToInstance                  sync.RWMutex
	lockAddInstance                         sync.RWMutex
	lockAddVersionDetailsToInstance         sync.RWMutex
	lockCheckDatasetExists                  sync.RWMutex
	lockCheckEditionExists                  sync.RWMutex
	lockDeleteDataset                       sync.RWMutex
	lockDeleteEdition                       sync.RWMutex
	lockGetDataset                          sync.RWMutex
	lockGetDatasets                         sync.RWMutex
	lockGetDimensionOptions                 sync.RWMutex
	lockGetDimensionOptionsFromIDs          sync.RWMutex
	lockGetDimensions                       sync.RWMutex
	lockGetDimensionsFromInstance           sync.RWMutex
	lockGetEdition                          sync.RWMutex
	lockGetEditions                         sync.RWMutex
	lockGetInstance                         sync.RWMutex
	lockGetInstances                        sync.RWMutex
	lockGetNextVersion                      sync.RWMutex
	lockGetUniqueDimensionAndOptions        sync.RWMutex
	lockGetVersion                          sync.RWMutex
	lockGetVersions                         sync.RWMutex
	lockRemoveDatasetVersionAndEditionLinks sync.RWMutex
	lockSetInstanceIsPublished              sync.RWMutex
	lockUnlockInstance                      sync.RWMutex
	lockUpdateBuildHierarchyTaskState       sync.RWMutex
	lockUpdateBuildSearchTaskState          sync.RWMutex
	lockUpdateDataset                       sync.RWMutex
	lockUpdateDatasetWithAssociation        sync.RWMutex
	lockUpdateDimensionsNodeIDAndOrder      sync.RWMutex
	lockUpdateETagForOptions                sync.RWMutex
	lockUpdateImportObservationsTaskState   sync.RWMutex
	lockUpdateInstance                      sync.RWMutex
	lockUpdateObservationInserted           sync.RWMutex
	lockUpdateVersion                       sync.RWMutex
	lockUpsertContact                       sync.RWMutex
	lockUpsertDataset                       sync.RWMutex
	lockUpsertDimensionsToInstance          sync.RWMutex
	lockUpsertEdition                       sync.RWMutex
	lockUpsertVersion                       sync.RWMutex
}

// AcquireInstanceLock calls AcquireInstanceLockFunc.
func (mock *StorerMock) AcquireInstanceLock(ctx context.Context, instanceID string) (string, error) {
	if mock.AcquireInstanceLockFunc == nil {
		panic("StorerMock.AcquireInstanceLockFunc: method is nil but Storer.AcquireInstanceLock was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
	}
	mock.lockAcquireInstanceLock.Lock()
	mock.calls.AcquireInstanceLock = append(mock.calls.AcquireInstanceLock, callInfo)
	mock.lockAcquireInstanceLock.Unlock()
	return mock.AcquireInstanceLockFunc(ctx, instanceID)
}

// AcquireInstanceLockCalls gets all the calls that were made to AcquireInstanceLock.
// Check the length with:
//     len(mockedStorer.AcquireInstanceLockCalls())
func (mock *StorerMock) AcquireInstanceLockCalls() []struct {
	Ctx        context.Context
	InstanceID string
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
	}
	mock.lockAcquireInstanceLock.RLock()
	calls = mock.calls.AcquireInstanceLock
	mock.lockAcquireInstanceLock.RUnlock()
	return calls
}

// AddEventToInstance calls AddEventToInstanceFunc.
func (mock *StorerMock) AddEventToInstance(currentInstance *models.Instance, event *models.Event, eTagSelector string) (string, error) {
	if mock.AddEventToInstanceFunc == nil {
		panic("StorerMock.AddEventToInstanceFunc: method is nil but Storer.AddEventToInstance was just called")
	}
	callInfo := struct {
		CurrentInstance *models.Instance
		Event           *models.Event
		ETagSelector    string
	}{
		CurrentInstance: currentInstance,
		Event:           event,
		ETagSelector:    eTagSelector,
	}
	mock.lockAddEventToInstance.Lock()
	mock.calls.AddEventToInstance = append(mock.calls.AddEventToInstance, callInfo)
	mock.lockAddEventToInstance.Unlock()
	return mock.AddEventToInstanceFunc(currentInstance, event, eTagSelector)
}

// AddEventToInstanceCalls gets all the calls that were made to AddEventToInstance.
// Check the length with:
//     len(mockedStorer.AddEventToInstanceCalls())
func (mock *StorerMock) AddEventToInstanceCalls() []struct {
	CurrentInstance *models.Instance
	Event           *models.Event
	ETagSelector    string
} {
	var calls []struct {
		CurrentInstance *models.Instance
		Event           *models.Event
		ETagSelector    string
	}
	mock.lockAddEventToInstance.RLock()
	calls = mock.calls.AddEventToInstance
	mock.lockAddEventToInstance.RUnlock()
	return calls
}

// AddInstance calls AddInstanceFunc.
func (mock *StorerMock) AddInstance(instance *models.Instance) (*models.Instance, error) {
	if mock.AddInstanceFunc == nil {
		panic("StorerMock.AddInstanceFunc: method is nil but Storer.AddInstance was just called")
	}
	callInfo := struct {
		Instance *models.Instance
	}{
		Instance: instance,
	}
	mock.lockAddInstance.Lock()
	mock.calls.AddInstance = append(mock.calls.AddInstance, callInfo)
	mock.lockAddInstance.Unlock()
	return mock.AddInstanceFunc(instance)
}

// AddInstanceCalls gets all the calls that were made to AddInstance.
// Check the length with:
//     len(mockedStorer.AddInstanceCalls())
func (mock *StorerMock) AddInstanceCalls() []struct {
	Instance *models.Instance
} {
	var calls []struct {
		Instance *models.Instance
	}
	mock.lockAddInstance.RLock()
	calls = mock.calls.AddInstance
	mock.lockAddInstance.RUnlock()
	return calls
}

// AddVersionDetailsToInstance calls AddVersionDetailsToInstanceFunc.
func (mock *StorerMock) AddVersionDetailsToInstance(ctx context.Context, instanceID string, datasetID string, edition string, version int) error {
	if mock.AddVersionDetailsToInstanceFunc == nil {
		panic("StorerMock.AddVersionDetailsToInstanceFunc: method is nil but Storer.AddVersionDetailsToInstance was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
		DatasetID  string
		Edition    string
		Version    int
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
		DatasetID:  datasetID,
		Edition:    edition,
		Version:    version,
	}
	mock.lockAddVersionDetailsToInstance.Lock()
	mock.calls.AddVersionDetailsToInstance = append(mock.calls.AddVersionDetailsToInstance, callInfo)
	mock.lockAddVersionDetailsToInstance.Unlock()
	return mock.AddVersionDetailsToInstanceFunc(ctx, instanceID, datasetID, edition, version)
}

// AddVersionDetailsToInstanceCalls gets all the calls that were made to AddVersionDetailsToInstance.
// Check the length with:
//     len(mockedStorer.AddVersionDetailsToInstanceCalls())
func (mock *StorerMock) AddVersionDetailsToInstanceCalls() []struct {
	Ctx        context.Context
	InstanceID string
	DatasetID  string
	Edition    string
	Version    int
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
		DatasetID  string
		Edition    string
		Version    int
	}
	mock.lockAddVersionDetailsToInstance.RLock()
	calls = mock.calls.AddVersionDetailsToInstance
	mock.lockAddVersionDetailsToInstance.RUnlock()
	return calls
}

// CheckDatasetExists calls CheckDatasetExistsFunc.
func (mock *StorerMock) CheckDatasetExists(ID string, state string) error {
	if mock.CheckDatasetExistsFunc == nil {
		panic("StorerMock.CheckDatasetExistsFunc: method is nil but Storer.CheckDatasetExists was just called")
	}
	callInfo := struct {
		ID    string
		State string
	}{
		ID:    ID,
		State: state,
	}
	mock.lockCheckDatasetExists.Lock()
	mock.calls.CheckDatasetExists = append(mock.calls.CheckDatasetExists, callInfo)
	mock.lockCheckDatasetExists.Unlock()
	return mock.CheckDatasetExistsFunc(ID, state)
}

// CheckDatasetExistsCalls gets all the calls that were made to CheckDatasetExists.
// Check the length with:
//     len(mockedStorer.CheckDatasetExistsCalls())
func (mock *StorerMock) CheckDatasetExistsCalls() []struct {
	ID    string
	State string
} {
	var calls []struct {
		ID    string
		State string
	}
	mock.lockCheckDatasetExists.RLock()
	calls = mock.calls.CheckDatasetExists
	mock.lockCheckDatasetExists.RUnlock()
	return calls
}

// CheckEditionExists calls CheckEditionExistsFunc.
func (mock *StorerMock) CheckEditionExists(ID string, editionID string, state string) error {
	if mock.CheckEditionExistsFunc == nil {
		panic("StorerMock.CheckEditionExistsFunc: method is nil but Storer.CheckEditionExists was just called")
	}
	callInfo := struct {
		ID        string
		EditionID string
		State     string
	}{
		ID:        ID,
		EditionID: editionID,
		State:     state,
	}
	mock.lockCheckEditionExists.Lock()
	mock.calls.CheckEditionExists = append(mock.calls.CheckEditionExists, callInfo)
	mock.lockCheckEditionExists.Unlock()
	return mock.CheckEditionExistsFunc(ID, editionID, state)
}

// CheckEditionExistsCalls gets all the calls that were made to CheckEditionExists.
// Check the length with:
//     len(mockedStorer.CheckEditionExistsCalls())
func (mock *StorerMock) CheckEditionExistsCalls() []struct {
	ID        string
	EditionID string
	State     string
} {
	var calls []struct {
		ID        string
		EditionID string
		State     string
	}
	mock.lockCheckEditionExists.RLock()
	calls = mock.calls.CheckEditionExists
	mock.lockCheckEditionExists.RUnlock()
	return calls
}

// DeleteDataset calls DeleteDatasetFunc.
func (mock *StorerMock) DeleteDataset(ID string) error {
	if mock.DeleteDatasetFunc == nil {
		panic("StorerMock.DeleteDatasetFunc: method is nil but Storer.DeleteDataset was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: ID,
	}
	mock.lockDeleteDataset.Lock()
	mock.calls.DeleteDataset = append(mock.calls.DeleteDataset, callInfo)
	mock.lockDeleteDataset.Unlock()
	return mock.DeleteDatasetFunc(ID)
}

// DeleteDatasetCalls gets all the calls that were made to DeleteDataset.
// Check the length with:
//     len(mockedStorer.DeleteDatasetCalls())
func (mock *StorerMock) DeleteDatasetCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockDeleteDataset.RLock()
	calls = mock.calls.DeleteDataset
	mock.lockDeleteDataset.RUnlock()
	return calls
}

// DeleteEdition calls DeleteEditionFunc.
func (mock *StorerMock) DeleteEdition(ID string) error {
	if mock.DeleteEditionFunc == nil {
		panic("StorerMock.DeleteEditionFunc: method is nil but Storer.DeleteEdition was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: ID,
	}
	mock.lockDeleteEdition.Lock()
	mock.calls.DeleteEdition = append(mock.calls.DeleteEdition, callInfo)
	mock.lockDeleteEdition.Unlock()
	return mock.DeleteEditionFunc(ID)
}

// DeleteEditionCalls gets all the calls that were made to DeleteEdition.
// Check the length with:
//     len(mockedStorer.DeleteEditionCalls())
func (mock *StorerMock) DeleteEditionCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockDeleteEdition.RLock()
	calls = mock.calls.DeleteEdition
	mock.lockDeleteEdition.RUnlock()
	return calls
}

// GetDataset calls GetDatasetFunc.
func (mock *StorerMock) GetDataset(ID string) (*models.DatasetUpdate, error) {
	if mock.GetDatasetFunc == nil {
		panic("StorerMock.GetDatasetFunc: method is nil but Storer.GetDataset was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: ID,
	}
	mock.lockGetDataset.Lock()
	mock.calls.GetDataset = append(mock.calls.GetDataset, callInfo)
	mock.lockGetDataset.Unlock()
	return mock.GetDatasetFunc(ID)
}

// GetDatasetCalls gets all the calls that were made to GetDataset.
// Check the length with:
//     len(mockedStorer.GetDatasetCalls())
func (mock *StorerMock) GetDatasetCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockGetDataset.RLock()
	calls = mock.calls.GetDataset
	mock.lockGetDataset.RUnlock()
	return calls
}

// GetDatasets calls GetDatasetsFunc.
func (mock *StorerMock) GetDatasets(ctx context.Context, offset int, limit int, authorised bool) ([]*models.DatasetUpdate, int, error) {
	if mock.GetDatasetsFunc == nil {
		panic("StorerMock.GetDatasetsFunc: method is nil but Storer.GetDatasets was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Offset     int
		Limit      int
		Authorised bool
	}{
		Ctx:        ctx,
		Offset:     offset,
		Limit:      limit,
		Authorised: authorised,
	}
	mock.lockGetDatasets.Lock()
	mock.calls.GetDatasets = append(mock.calls.GetDatasets, callInfo)
	mock.lockGetDatasets.Unlock()
	return mock.GetDatasetsFunc(ctx, offset, limit, authorised)
}

// GetDatasetsCalls gets all the calls that were made to GetDatasets.
// Check the length with:
//     len(mockedStorer.GetDatasetsCalls())
func (mock *StorerMock) GetDatasetsCalls() []struct {
	Ctx        context.Context
	Offset     int
	Limit      int
	Authorised bool
} {
	var calls []struct {
		Ctx        context.Context
		Offset     int
		Limit      int
		Authorised bool
	}
	mock.lockGetDatasets.RLock()
	calls = mock.calls.GetDatasets
	mock.lockGetDatasets.RUnlock()
	return calls
}

// GetDimensionOptions calls GetDimensionOptionsFunc.
func (mock *StorerMock) GetDimensionOptions(ctx context.Context, version *models.Version, dimension string, offset int, limit int) ([]*models.PublicDimensionOption, int, error) {
	if mock.GetDimensionOptionsFunc == nil {
		panic("StorerMock.GetDimensionOptionsFunc: method is nil but Storer.GetDimensionOptions was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Version   *models.Version
		Dimension string
		Offset    int
		Limit     int
	}{
		Ctx:       ctx,
		Version:   version,
		Dimension: dimension,
		Offset:    offset,
		Limit:     limit,
	}
	mock.lockGetDimensionOptions.Lock()
	mock.calls.GetDimensionOptions = append(mock.calls.GetDimensionOptions, callInfo)
	mock.lockGetDimensionOptions.Unlock()
	return mock.GetDimensionOptionsFunc(ctx, version, dimension, offset, limit)
}

// GetDimensionOptionsCalls gets all the calls that were made to GetDimensionOptions.
// Check the length with:
//     len(mockedStorer.GetDimensionOptionsCalls())
func (mock *StorerMock) GetDimensionOptionsCalls() []struct {
	Ctx       context.Context
	Version   *models.Version
	Dimension string
	Offset    int
	Limit     int
} {
	var calls []struct {
		Ctx       context.Context
		Version   *models.Version
		Dimension string
		Offset    int
		Limit     int
	}
	mock.lockGetDimensionOptions.RLock()
	calls = mock.calls.GetDimensionOptions
	mock.lockGetDimensionOptions.RUnlock()
	return calls
}

// GetDimensionOptionsFromIDs calls GetDimensionOptionsFromIDsFunc.
func (mock *StorerMock) GetDimensionOptionsFromIDs(version *models.Version, dimension string, ids []string) ([]*models.PublicDimensionOption, int, error) {
	if mock.GetDimensionOptionsFromIDsFunc == nil {
		panic("StorerMock.GetDimensionOptionsFromIDsFunc: method is nil but Storer.GetDimensionOptionsFromIDs was just called")
	}
	callInfo := struct {
		Version   *models.Version
		Dimension string
		Ids       []string
	}{
		Version:   version,
		Dimension: dimension,
		Ids:       ids,
	}
	mock.lockGetDimensionOptionsFromIDs.Lock()
	mock.calls.GetDimensionOptionsFromIDs = append(mock.calls.GetDimensionOptionsFromIDs, callInfo)
	mock.lockGetDimensionOptionsFromIDs.Unlock()
	return mock.GetDimensionOptionsFromIDsFunc(version, dimension, ids)
}

// GetDimensionOptionsFromIDsCalls gets all the calls that were made to GetDimensionOptionsFromIDs.
// Check the length with:
//     len(mockedStorer.GetDimensionOptionsFromIDsCalls())
func (mock *StorerMock) GetDimensionOptionsFromIDsCalls() []struct {
	Version   *models.Version
	Dimension string
	Ids       []string
} {
	var calls []struct {
		Version   *models.Version
		Dimension string
		Ids       []string
	}
	mock.lockGetDimensionOptionsFromIDs.RLock()
	calls = mock.calls.GetDimensionOptionsFromIDs
	mock.lockGetDimensionOptionsFromIDs.RUnlock()
	return calls
}

// GetDimensions calls GetDimensionsFunc.
func (mock *StorerMock) GetDimensions(versionID string) ([]bson.M, error) {
	if mock.GetDimensionsFunc == nil {
		panic("StorerMock.GetDimensionsFunc: method is nil but Storer.GetDimensions was just called")
	}
	callInfo := struct {
		VersionID string
	}{
		VersionID: versionID,
	}
	mock.lockGetDimensions.Lock()
	mock.calls.GetDimensions = append(mock.calls.GetDimensions, callInfo)
	mock.lockGetDimensions.Unlock()
	return mock.GetDimensionsFunc(versionID)
}

// GetDimensionsCalls gets all the calls that were made to GetDimensions.
// Check the length with:
//     len(mockedStorer.GetDimensionsCalls())
func (mock *StorerMock) GetDimensionsCalls() []struct {
	VersionID string
} {
	var calls []struct {
		VersionID string
	}
	mock.lockGetDimensions.RLock()
	calls = mock.calls.GetDimensions
	mock.lockGetDimensions.RUnlock()
	return calls
}

// GetDimensionsFromInstance calls GetDimensionsFromInstanceFunc.
func (mock *StorerMock) GetDimensionsFromInstance(ctx context.Context, ID string, offset int, limit int) ([]*models.DimensionOption, int, error) {
	if mock.GetDimensionsFromInstanceFunc == nil {
		panic("StorerMock.GetDimensionsFromInstanceFunc: method is nil but Storer.GetDimensionsFromInstance was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ID     string
		Offset int
		Limit  int
	}{
		Ctx:    ctx,
		ID:     ID,
		Offset: offset,
		Limit:  limit,
	}
	mock.lockGetDimensionsFromInstance.Lock()
	mock.calls.GetDimensionsFromInstance = append(mock.calls.GetDimensionsFromInstance, callInfo)
	mock.lockGetDimensionsFromInstance.Unlock()
	return mock.GetDimensionsFromInstanceFunc(ctx, ID, offset, limit)
}

// GetDimensionsFromInstanceCalls gets all the calls that were made to GetDimensionsFromInstance.
// Check the length with:
//     len(mockedStorer.GetDimensionsFromInstanceCalls())
func (mock *StorerMock) GetDimensionsFromInstanceCalls() []struct {
	Ctx    context.Context
	ID     string
	Offset int
	Limit  int
} {
	var calls []struct {
		Ctx    context.Context
		ID     string
		Offset int
		Limit  int
	}
	mock.lockGetDimensionsFromInstance.RLock()
	calls = mock.calls.GetDimensionsFromInstance
	mock.lockGetDimensionsFromInstance.RUnlock()
	return calls
}

// GetEdition calls GetEditionFunc.
func (mock *StorerMock) GetEdition(ID string, editionID string, state string) (*models.EditionUpdate, error) {
	if mock.GetEditionFunc == nil {
		panic("StorerMock.GetEditionFunc: method is nil but Storer.GetEdition was just called")
	}
	callInfo := struct {
		ID        string
		EditionID string
		State     string
	}{
		ID:        ID,
		EditionID: editionID,
		State:     state,
	}
	mock.lockGetEdition.Lock()
	mock.calls.GetEdition = append(mock.calls.GetEdition, callInfo)
	mock.lockGetEdition.Unlock()
	return mock.GetEditionFunc(ID, editionID, state)
}

// GetEditionCalls gets all the calls that were made to GetEdition.
// Check the length with:
//     len(mockedStorer.GetEditionCalls())
func (mock *StorerMock) GetEditionCalls() []struct {
	ID        string
	EditionID string
	State     string
} {
	var calls []struct {
		ID        string
		EditionID string
		State     string
	}
	mock.lockGetEdition.RLock()
	calls = mock.calls.GetEdition
	mock.lockGetEdition.RUnlock()
	return calls
}

// GetEditions calls GetEditionsFunc.
func (mock *StorerMock) GetEditions(ctx context.Context, ID string, state string, offset int, limit int, authorised bool) ([]*models.EditionUpdate, int, error) {
	if mock.GetEditionsFunc == nil {
		panic("StorerMock.GetEditionsFunc: method is nil but Storer.GetEditions was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ID         string
		State      string
		Offset     int
		Limit      int
		Authorised bool
	}{
		Ctx:        ctx,
		ID:         ID,
		State:      state,
		Offset:     offset,
		Limit:      limit,
		Authorised: authorised,
	}
	mock.lockGetEditions.Lock()
	mock.calls.GetEditions = append(mock.calls.GetEditions, callInfo)
	mock.lockGetEditions.Unlock()
	return mock.GetEditionsFunc(ctx, ID, state, offset, limit, authorised)
}

// GetEditionsCalls gets all the calls that were made to GetEditions.
// Check the length with:
//     len(mockedStorer.GetEditionsCalls())
func (mock *StorerMock) GetEditionsCalls() []struct {
	Ctx        context.Context
	ID         string
	State      string
	Offset     int
	Limit      int
	Authorised bool
} {
	var calls []struct {
		Ctx        context.Context
		ID         string
		State      string
		Offset     int
		Limit      int
		Authorised bool
	}
	mock.lockGetEditions.RLock()
	calls = mock.calls.GetEditions
	mock.lockGetEditions.RUnlock()
	return calls
}

// GetInstance calls GetInstanceFunc.
func (mock *StorerMock) GetInstance(ID string, eTagSelector string) (*models.Instance, error) {
	if mock.GetInstanceFunc == nil {
		panic("StorerMock.GetInstanceFunc: method is nil but Storer.GetInstance was just called")
	}
	callInfo := struct {
		ID           string
		ETagSelector string
	}{
		ID:           ID,
		ETagSelector: eTagSelector,
	}
	mock.lockGetInstance.Lock()
	mock.calls.GetInstance = append(mock.calls.GetInstance, callInfo)
	mock.lockGetInstance.Unlock()
	return mock.GetInstanceFunc(ID, eTagSelector)
}

// GetInstanceCalls gets all the calls that were made to GetInstance.
// Check the length with:
//     len(mockedStorer.GetInstanceCalls())
func (mock *StorerMock) GetInstanceCalls() []struct {
	ID           string
	ETagSelector string
} {
	var calls []struct {
		ID           string
		ETagSelector string
	}
	mock.lockGetInstance.RLock()
	calls = mock.calls.GetInstance
	mock.lockGetInstance.RUnlock()
	return calls
}

// GetInstances calls GetInstancesFunc.
func (mock *StorerMock) GetInstances(ctx context.Context, states []string, datasets []string, offset int, limit int) ([]*models.Instance, int, error) {
	if mock.GetInstancesFunc == nil {
		panic("StorerMock.GetInstancesFunc: method is nil but Storer.GetInstances was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		States   []string
		Datasets []string
		Offset   int
		Limit    int
	}{
		Ctx:      ctx,
		States:   states,
		Datasets: datasets,
		Offset:   offset,
		Limit:    limit,
	}
	mock.lockGetInstances.Lock()
	mock.calls.GetInstances = append(mock.calls.GetInstances, callInfo)
	mock.lockGetInstances.Unlock()
	return mock.GetInstancesFunc(ctx, states, datasets, offset, limit)
}

// GetInstancesCalls gets all the calls that were made to GetInstances.
// Check the length with:
//     len(mockedStorer.GetInstancesCalls())
func (mock *StorerMock) GetInstancesCalls() []struct {
	Ctx      context.Context
	States   []string
	Datasets []string
	Offset   int
	Limit    int
} {
	var calls []struct {
		Ctx      context.Context
		States   []string
		Datasets []string
		Offset   int
		Limit    int
	}
	mock.lockGetInstances.RLock()
	calls = mock.calls.GetInstances
	mock.lockGetInstances.RUnlock()
	return calls
}

// GetNextVersion calls GetNextVersionFunc.
func (mock *StorerMock) GetNextVersion(datasetID string, editionID string) (int, error) {
	if mock.GetNextVersionFunc == nil {
		panic("StorerMock.GetNextVersionFunc: method is nil but Storer.GetNextVersion was just called")
	}
	callInfo := struct {
		DatasetID string
		EditionID string
	}{
		DatasetID: datasetID,
		EditionID: editionID,
	}
	mock.lockGetNextVersion.Lock()
	mock.calls.GetNextVersion = append(mock.calls.GetNextVersion, callInfo)
	mock.lockGetNextVersion.Unlock()
	return mock.GetNextVersionFunc(datasetID, editionID)
}

// GetNextVersionCalls gets all the calls that were made to GetNextVersion.
// Check the length with:
//     len(mockedStorer.GetNextVersionCalls())
func (mock *StorerMock) GetNextVersionCalls() []struct {
	DatasetID string
	EditionID string
} {
	var calls []struct {
		DatasetID string
		EditionID string
	}
	mock.lockGetNextVersion.RLock()
	calls = mock.calls.GetNextVersion
	mock.lockGetNextVersion.RUnlock()
	return calls
}

// GetUniqueDimensionAndOptions calls GetUniqueDimensionAndOptionsFunc.
func (mock *StorerMock) GetUniqueDimensionAndOptions(ID string, dimension string) ([]*string, int, error) {
	if mock.GetUniqueDimensionAndOptionsFunc == nil {
		panic("StorerMock.GetUniqueDimensionAndOptionsFunc: method is nil but Storer.GetUniqueDimensionAndOptions was just called")
	}
	callInfo := struct {
		ID        string
		Dimension string
	}{
		ID:        ID,
		Dimension: dimension,
	}
	mock.lockGetUniqueDimensionAndOptions.Lock()
	mock.calls.GetUniqueDimensionAndOptions = append(mock.calls.GetUniqueDimensionAndOptions, callInfo)
	mock.lockGetUniqueDimensionAndOptions.Unlock()
	return mock.GetUniqueDimensionAndOptionsFunc(ID, dimension)
}

// GetUniqueDimensionAndOptionsCalls gets all the calls that were made to GetUniqueDimensionAndOptions.
// Check the length with:
//     len(mockedStorer.GetUniqueDimensionAndOptionsCalls())
func (mock *StorerMock) GetUniqueDimensionAndOptionsCalls() []struct {
	ID        string
	Dimension string
} {
	var calls []struct {
		ID        string
		Dimension string
	}
	mock.lockGetUniqueDimensionAndOptions.RLock()
	calls = mock.calls.GetUniqueDimensionAndOptions
	mock.lockGetUniqueDimensionAndOptions.RUnlock()
	return calls
}

// GetVersion calls GetVersionFunc.
func (mock *StorerMock) GetVersion(datasetID string, editionID string, version int, state string) (*models.Version, error) {
	if mock.GetVersionFunc == nil {
		panic("StorerMock.GetVersionFunc: method is nil but Storer.GetVersion was just called")
	}
	callInfo := struct {
		DatasetID string
		EditionID string
		Version   int
		State     string
	}{
		DatasetID: datasetID,
		EditionID: editionID,
		Version:   version,
		State:     state,
	}
	mock.lockGetVersion.Lock()
	mock.calls.GetVersion = append(mock.calls.GetVersion, callInfo)
	mock.lockGetVersion.Unlock()
	return mock.GetVersionFunc(datasetID, editionID, version, state)
}

// GetVersionCalls gets all the calls that were made to GetVersion.
// Check the length with:
//     len(mockedStorer.GetVersionCalls())
func (mock *StorerMock) GetVersionCalls() []struct {
	DatasetID string
	EditionID string
	Version   int
	State     string
} {
	var calls []struct {
		DatasetID string
		EditionID string
		Version   int
		State     string
	}
	mock.lockGetVersion.RLock()
	calls = mock.calls.GetVersion
	mock.lockGetVersion.RUnlock()
	return calls
}

// GetVersions calls GetVersionsFunc.
func (mock *StorerMock) GetVersions(ctx context.Context, datasetID string, editionID string, state string, offset int, limit int) ([]models.Version, int, error) {
	if mock.GetVersionsFunc == nil {
		panic("StorerMock.GetVersionsFunc: method is nil but Storer.GetVersions was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		DatasetID string
		EditionID string
		State     string
		Offset    int
		Limit     int
	}{
		Ctx:       ctx,
		DatasetID: datasetID,
		EditionID: editionID,
		State:     state,
		Offset:    offset,
		Limit:     limit,
	}
	mock.lockGetVersions.Lock()
	mock.calls.GetVersions = append(mock.calls.GetVersions, callInfo)
	mock.lockGetVersions.Unlock()
	return mock.GetVersionsFunc(ctx, datasetID, editionID, state, offset, limit)
}

// GetVersionsCalls gets all the calls that were made to GetVersions.
// Check the length with:
//     len(mockedStorer.GetVersionsCalls())
func (mock *StorerMock) GetVersionsCalls() []struct {
	Ctx       context.Context
	DatasetID string
	EditionID string
	State     string
	Offset    int
	Limit     int
} {
	var calls []struct {
		Ctx       context.Context
		DatasetID string
		EditionID string
		State     string
		Offset    int
		Limit     int
	}
	mock.lockGetVersions.RLock()
	calls = mock.calls.GetVersions
	mock.lockGetVersions.RUnlock()
	return calls
}

// RemoveDatasetVersionAndEditionLinks calls RemoveDatasetVersionAndEditionLinksFunc.
func (mock *StorerMock) RemoveDatasetVersionAndEditionLinks(id string) error {
	if mock.RemoveDatasetVersionAndEditionLinksFunc == nil {
		panic("StorerMock.RemoveDatasetVersionAndEditionLinksFunc: method is nil but Storer.RemoveDatasetVersionAndEditionLinks was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockRemoveDatasetVersionAndEditionLinks.Lock()
	mock.calls.RemoveDatasetVersionAndEditionLinks = append(mock.calls.RemoveDatasetVersionAndEditionLinks, callInfo)
	mock.lockRemoveDatasetVersionAndEditionLinks.Unlock()
	return mock.RemoveDatasetVersionAndEditionLinksFunc(id)
}

// RemoveDatasetVersionAndEditionLinksCalls gets all the calls that were made to RemoveDatasetVersionAndEditionLinks.
// Check the length with:
//     len(mockedStorer.RemoveDatasetVersionAndEditionLinksCalls())
func (mock *StorerMock) RemoveDatasetVersionAndEditionLinksCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockRemoveDatasetVersionAndEditionLinks.RLock()
	calls = mock.calls.RemoveDatasetVersionAndEditionLinks
	mock.lockRemoveDatasetVersionAndEditionLinks.RUnlock()
	return calls
}

// SetInstanceIsPublished calls SetInstanceIsPublishedFunc.
func (mock *StorerMock) SetInstanceIsPublished(ctx context.Context, instanceID string) error {
	if mock.SetInstanceIsPublishedFunc == nil {
		panic("StorerMock.SetInstanceIsPublishedFunc: method is nil but Storer.SetInstanceIsPublished was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
	}
	mock.lockSetInstanceIsPublished.Lock()
	mock.calls.SetInstanceIsPublished = append(mock.calls.SetInstanceIsPublished, callInfo)
	mock.lockSetInstanceIsPublished.Unlock()
	return mock.SetInstanceIsPublishedFunc(ctx, instanceID)
}

// SetInstanceIsPublishedCalls gets all the calls that were made to SetInstanceIsPublished.
// Check the length with:
//     len(mockedStorer.SetInstanceIsPublishedCalls())
func (mock *StorerMock) SetInstanceIsPublishedCalls() []struct {
	Ctx        context.Context
	InstanceID string
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
	}
	mock.lockSetInstanceIsPublished.RLock()
	calls = mock.calls.SetInstanceIsPublished
	mock.lockSetInstanceIsPublished.RUnlock()
	return calls
}

// UnlockInstance calls UnlockInstanceFunc.
func (mock *StorerMock) UnlockInstance(lockID string) {
	if mock.UnlockInstanceFunc == nil {
		panic("StorerMock.UnlockInstanceFunc: method is nil but Storer.UnlockInstance was just called")
	}
	callInfo := struct {
		LockID string
	}{
		LockID: lockID,
	}
	mock.lockUnlockInstance.Lock()
	mock.calls.UnlockInstance = append(mock.calls.UnlockInstance, callInfo)
	mock.lockUnlockInstance.Unlock()
	mock.UnlockInstanceFunc(lockID)
}

// UnlockInstanceCalls gets all the calls that were made to UnlockInstance.
// Check the length with:
//     len(mockedStorer.UnlockInstanceCalls())
func (mock *StorerMock) UnlockInstanceCalls() []struct {
	LockID string
} {
	var calls []struct {
		LockID string
	}
	mock.lockUnlockInstance.RLock()
	calls = mock.calls.UnlockInstance
	mock.lockUnlockInstance.RUnlock()
	return calls
}

// UpdateBuildHierarchyTaskState calls UpdateBuildHierarchyTaskStateFunc.
func (mock *StorerMock) UpdateBuildHierarchyTaskState(currentInstance *models.Instance, dimension string, state string, eTagSelector string) (string, error) {
	if mock.UpdateBuildHierarchyTaskStateFunc == nil {
		panic("StorerMock.UpdateBuildHierarchyTaskStateFunc: method is nil but Storer.UpdateBuildHierarchyTaskState was just called")
	}
	callInfo := struct {
		CurrentInstance *models.Instance
		Dimension       string
		State           string
		ETagSelector    string
	}{
		CurrentInstance: currentInstance,
		Dimension:       dimension,
		State:           state,
		ETagSelector:    eTagSelector,
	}
	mock.lockUpdateBuildHierarchyTaskState.Lock()
	mock.calls.UpdateBuildHierarchyTaskState = append(mock.calls.UpdateBuildHierarchyTaskState, callInfo)
	mock.lockUpdateBuildHierarchyTaskState.Unlock()
	return mock.UpdateBuildHierarchyTaskStateFunc(currentInstance, dimension, state, eTagSelector)
}

// UpdateBuildHierarchyTaskStateCalls gets all the calls that were made to UpdateBuildHierarchyTaskState.
// Check the length with:
//     len(mockedStorer.UpdateBuildHierarchyTaskStateCalls())
func (mock *StorerMock) UpdateBuildHierarchyTaskStateCalls() []struct {
	CurrentInstance *models.Instance
	Dimension       string
	State           string
	ETagSelector    string
} {
	var calls []struct {
		CurrentInstance *models.Instance
		Dimension       string
		State           string
		ETagSelector    string
	}
	mock.lockUpdateBuildHierarchyTaskState.RLock()
	calls = mock.calls.UpdateBuildHierarchyTaskState
	mock.lockUpdateBuildHierarchyTaskState.RUnlock()
	return calls
}

// UpdateBuildSearchTaskState calls UpdateBuildSearchTaskStateFunc.
func (mock *StorerMock) UpdateBuildSearchTaskState(currentInstance *models.Instance, dimension string, state string, eTagSelector string) (string, error) {
	if mock.UpdateBuildSearchTaskStateFunc == nil {
		panic("StorerMock.UpdateBuildSearchTaskStateFunc: method is nil but Storer.UpdateBuildSearchTaskState was just called")
	}
	callInfo := struct {
		CurrentInstance *models.Instance
		Dimension       string
		State           string
		ETagSelector    string
	}{
		CurrentInstance: currentInstance,
		Dimension:       dimension,
		State:           state,
		ETagSelector:    eTagSelector,
	}
	mock.lockUpdateBuildSearchTaskState.Lock()
	mock.calls.UpdateBuildSearchTaskState = append(mock.calls.UpdateBuildSearchTaskState, callInfo)
	mock.lockUpdateBuildSearchTaskState.Unlock()
	return mock.UpdateBuildSearchTaskStateFunc(currentInstance, dimension, state, eTagSelector)
}

// UpdateBuildSearchTaskStateCalls gets all the calls that were made to UpdateBuildSearchTaskState.
// Check the length with:
//     len(mockedStorer.UpdateBuildSearchTaskStateCalls())
func (mock *StorerMock) UpdateBuildSearchTaskStateCalls() []struct {
	CurrentInstance *models.Instance
	Dimension       string
	State           string
	ETagSelector    string
} {
	var calls []struct {
		CurrentInstance *models.Instance
		Dimension       string
		State           string
		ETagSelector    string
	}
	mock.lockUpdateBuildSearchTaskState.RLock()
	calls = mock.calls.UpdateBuildSearchTaskState
	mock.lockUpdateBuildSearchTaskState.RUnlock()
	return calls
}

// UpdateDataset calls UpdateDatasetFunc.
func (mock *StorerMock) UpdateDataset(ctx context.Context, ID string, dataset *models.Dataset, currentState string) error {
	if mock.UpdateDatasetFunc == nil {
		panic("StorerMock.UpdateDatasetFunc: method is nil but Storer.UpdateDataset was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ID           string
		Dataset      *models.Dataset
		CurrentState string
	}{
		Ctx:          ctx,
		ID:           ID,
		Dataset:      dataset,
		CurrentState: currentState,
	}
	mock.lockUpdateDataset.Lock()
	mock.calls.UpdateDataset = append(mock.calls.UpdateDataset, callInfo)
	mock.lockUpdateDataset.Unlock()
	return mock.UpdateDatasetFunc(ctx, ID, dataset, currentState)
}

// UpdateDatasetCalls gets all the calls that were made to UpdateDataset.
// Check the length with:
//     len(mockedStorer.UpdateDatasetCalls())
func (mock *StorerMock) UpdateDatasetCalls() []struct {
	Ctx          context.Context
	ID           string
	Dataset      *models.Dataset
	CurrentState string
} {
	var calls []struct {
		Ctx          context.Context
		ID           string
		Dataset      *models.Dataset
		CurrentState string
	}
	mock.lockUpdateDataset.RLock()
	calls = mock.calls.UpdateDataset
	mock.lockUpdateDataset.RUnlock()
	return calls
}

// UpdateDatasetWithAssociation calls UpdateDatasetWithAssociationFunc.
func (mock *StorerMock) UpdateDatasetWithAssociation(ID string, state string, version *models.Version) error {
	if mock.UpdateDatasetWithAssociationFunc == nil {
		panic("StorerMock.UpdateDatasetWithAssociationFunc: method is nil but Storer.UpdateDatasetWithAssociation was just called")
	}
	callInfo := struct {
		ID      string
		State   string
		Version *models.Version
	}{
		ID:      ID,
		State:   state,
		Version: version,
	}
	mock.lockUpdateDatasetWithAssociation.Lock()
	mock.calls.UpdateDatasetWithAssociation = append(mock.calls.UpdateDatasetWithAssociation, callInfo)
	mock.lockUpdateDatasetWithAssociation.Unlock()
	return mock.UpdateDatasetWithAssociationFunc(ID, state, version)
}

// UpdateDatasetWithAssociationCalls gets all the calls that were made to UpdateDatasetWithAssociation.
// Check the length with:
//     len(mockedStorer.UpdateDatasetWithAssociationCalls())
func (mock *StorerMock) UpdateDatasetWithAssociationCalls() []struct {
	ID      string
	State   string
	Version *models.Version
} {
	var calls []struct {
		ID      string
		State   string
		Version *models.Version
	}
	mock.lockUpdateDatasetWithAssociation.RLock()
	calls = mock.calls.UpdateDatasetWithAssociation
	mock.lockUpdateDatasetWithAssociation.RUnlock()
	return calls
}

// UpdateDimensionsNodeIDAndOrder calls UpdateDimensionsNodeIDAndOrderFunc.
func (mock *StorerMock) UpdateDimensionsNodeIDAndOrder(updates []*models.DimensionOption) error {
	if mock.UpdateDimensionsNodeIDAndOrderFunc == nil {
		panic("StorerMock.UpdateDimensionsNodeIDAndOrderFunc: method is nil but Storer.UpdateDimensionsNodeIDAndOrder was just called")
	}
	callInfo := struct {
		Updates []*models.DimensionOption
	}{
		Updates: updates,
	}
	mock.lockUpdateDimensionsNodeIDAndOrder.Lock()
	mock.calls.UpdateDimensionsNodeIDAndOrder = append(mock.calls.UpdateDimensionsNodeIDAndOrder, callInfo)
	mock.lockUpdateDimensionsNodeIDAndOrder.Unlock()
	return mock.UpdateDimensionsNodeIDAndOrderFunc(updates)
}

// UpdateDimensionsNodeIDAndOrderCalls gets all the calls that were made to UpdateDimensionsNodeIDAndOrder.
// Check the length with:
//     len(mockedStorer.UpdateDimensionsNodeIDAndOrderCalls())
func (mock *StorerMock) UpdateDimensionsNodeIDAndOrderCalls() []struct {
	Updates []*models.DimensionOption
} {
	var calls []struct {
		Updates []*models.DimensionOption
	}
	mock.lockUpdateDimensionsNodeIDAndOrder.RLock()
	calls = mock.calls.UpdateDimensionsNodeIDAndOrder
	mock.lockUpdateDimensionsNodeIDAndOrder.RUnlock()
	return calls
}

// UpdateETagForOptions calls UpdateETagForOptionsFunc.
func (mock *StorerMock) UpdateETagForOptions(currentInstance *models.Instance, upserts []*models.CachedDimensionOption, updates []*models.DimensionOption, eTagSelector string) (string, error) {
	if mock.UpdateETagForOptionsFunc == nil {
		panic("StorerMock.UpdateETagForOptionsFunc: method is nil but Storer.UpdateETagForOptions was just called")
	}
	callInfo := struct {
		CurrentInstance *models.Instance
		Upserts         []*models.CachedDimensionOption
		Updates         []*models.DimensionOption
		ETagSelector    string
	}{
		CurrentInstance: currentInstance,
		Upserts:         upserts,
		Updates:         updates,
		ETagSelector:    eTagSelector,
	}
	mock.lockUpdateETagForOptions.Lock()
	mock.calls.UpdateETagForOptions = append(mock.calls.UpdateETagForOptions, callInfo)
	mock.lockUpdateETagForOptions.Unlock()
	return mock.UpdateETagForOptionsFunc(currentInstance, upserts, updates, eTagSelector)
}

// UpdateETagForOptionsCalls gets all the calls that were made to UpdateETagForOptions.
// Check the length with:
//     len(mockedStorer.UpdateETagForOptionsCalls())
func (mock *StorerMock) UpdateETagForOptionsCalls() []struct {
	CurrentInstance *models.Instance
	Upserts         []*models.CachedDimensionOption
	Updates         []*models.DimensionOption
	ETagSelector    string
} {
	var calls []struct {
		CurrentInstance *models.Instance
		Upserts         []*models.CachedDimensionOption
		Updates         []*models.DimensionOption
		ETagSelector    string
	}
	mock.lockUpdateETagForOptions.RLock()
	calls = mock.calls.UpdateETagForOptions
	mock.lockUpdateETagForOptions.RUnlock()
	return calls
}

// UpdateImportObservationsTaskState calls UpdateImportObservationsTaskStateFunc.
func (mock *StorerMock) UpdateImportObservationsTaskState(currentInstance *models.Instance, state string, eTagSelector string) (string, error) {
	if mock.UpdateImportObservationsTaskStateFunc == nil {
		panic("StorerMock.UpdateImportObservationsTaskStateFunc: method is nil but Storer.UpdateImportObservationsTaskState was just called")
	}
	callInfo := struct {
		CurrentInstance *models.Instance
		State           string
		ETagSelector    string
	}{
		CurrentInstance: currentInstance,
		State:           state,
		ETagSelector:    eTagSelector,
	}
	mock.lockUpdateImportObservationsTaskState.Lock()
	mock.calls.UpdateImportObservationsTaskState = append(mock.calls.UpdateImportObservationsTaskState, callInfo)
	mock.lockUpdateImportObservationsTaskState.Unlock()
	return mock.UpdateImportObservationsTaskStateFunc(currentInstance, state, eTagSelector)
}

// UpdateImportObservationsTaskStateCalls gets all the calls that were made to UpdateImportObservationsTaskState.
// Check the length with:
//     len(mockedStorer.UpdateImportObservationsTaskStateCalls())
func (mock *StorerMock) UpdateImportObservationsTaskStateCalls() []struct {
	CurrentInstance *models.Instance
	State           string
	ETagSelector    string
} {
	var calls []struct {
		CurrentInstance *models.Instance
		State           string
		ETagSelector    string
	}
	mock.lockUpdateImportObservationsTaskState.RLock()
	calls = mock.calls.UpdateImportObservationsTaskState
	mock.lockUpdateImportObservationsTaskState.RUnlock()
	return calls
}

// UpdateInstance calls UpdateInstanceFunc.
func (mock *StorerMock) UpdateInstance(ctx context.Context, currentInstance *models.Instance, updatedInstance *models.Instance, eTagSelector string) (string, error) {
	if mock.UpdateInstanceFunc == nil {
		panic("StorerMock.UpdateInstanceFunc: method is nil but Storer.UpdateInstance was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		CurrentInstance *models.Instance
		UpdatedInstance *models.Instance
		ETagSelector    string
	}{
		Ctx:             ctx,
		CurrentInstance: currentInstance,
		UpdatedInstance: updatedInstance,
		ETagSelector:    eTagSelector,
	}
	mock.lockUpdateInstance.Lock()
	mock.calls.UpdateInstance = append(mock.calls.UpdateInstance, callInfo)
	mock.lockUpdateInstance.Unlock()
	return mock.UpdateInstanceFunc(ctx, currentInstance, updatedInstance, eTagSelector)
}

// UpdateInstanceCalls gets all the calls that were made to UpdateInstance.
// Check the length with:
//     len(mockedStorer.UpdateInstanceCalls())
func (mock *StorerMock) UpdateInstanceCalls() []struct {
	Ctx             context.Context
	CurrentInstance *models.Instance
	UpdatedInstance *models.Instance
	ETagSelector    string
} {
	var calls []struct {
		Ctx             context.Context
		CurrentInstance *models.Instance
		UpdatedInstance *models.Instance
		ETagSelector    string
	}
	mock.lockUpdateInstance.RLock()
	calls = mock.calls.UpdateInstance
	mock.lockUpdateInstance.RUnlock()
	return calls
}

// UpdateObservationInserted calls UpdateObservationInsertedFunc.
func (mock *StorerMock) UpdateObservationInserted(currentInstance *models.Instance, observationInserted int64, eTagSelector string) (string, error) {
	if mock.UpdateObservationInsertedFunc == nil {
		panic("StorerMock.UpdateObservationInsertedFunc: method is nil but Storer.UpdateObservationInserted was just called")
	}
	callInfo := struct {
		CurrentInstance     *models.Instance
		ObservationInserted int64
		ETagSelector        string
	}{
		CurrentInstance:     currentInstance,
		ObservationInserted: observationInserted,
		ETagSelector:        eTagSelector,
	}
	mock.lockUpdateObservationInserted.Lock()
	mock.calls.UpdateObservationInserted = append(mock.calls.UpdateObservationInserted, callInfo)
	mock.lockUpdateObservationInserted.Unlock()
	return mock.UpdateObservationInsertedFunc(currentInstance, observationInserted, eTagSelector)
}

// UpdateObservationInsertedCalls gets all the calls that were made to UpdateObservationInserted.
// Check the length with:
//     len(mockedStorer.UpdateObservationInsertedCalls())
func (mock *StorerMock) UpdateObservationInsertedCalls() []struct {
	CurrentInstance     *models.Instance
	ObservationInserted int64
	ETagSelector        string
} {
	var calls []struct {
		CurrentInstance     *models.Instance
		ObservationInserted int64
		ETagSelector        string
	}
	mock.lockUpdateObservationInserted.RLock()
	calls = mock.calls.UpdateObservationInserted
	mock.lockUpdateObservationInserted.RUnlock()
	return calls
}

// UpdateVersion calls UpdateVersionFunc.
func (mock *StorerMock) UpdateVersion(ID string, version *models.Version) error {
	if mock.UpdateVersionFunc == nil {
		panic("StorerMock.UpdateVersionFunc: method is nil but Storer.UpdateVersion was just called")
	}
	callInfo := struct {
		ID      string
		Version *models.Version
	}{
		ID:      ID,
		Version: version,
	}
	mock.lockUpdateVersion.Lock()
	mock.calls.UpdateVersion = append(mock.calls.UpdateVersion, callInfo)
	mock.lockUpdateVersion.Unlock()
	return mock.UpdateVersionFunc(ID, version)
}

// UpdateVersionCalls gets all the calls that were made to UpdateVersion.
// Check the length with:
//     len(mockedStorer.UpdateVersionCalls())
func (mock *StorerMock) UpdateVersionCalls() []struct {
	ID      string
	Version *models.Version
} {
	var calls []struct {
		ID      string
		Version *models.Version
	}
	mock.lockUpdateVersion.RLock()
	calls = mock.calls.UpdateVersion
	mock.lockUpdateVersion.RUnlock()
	return calls
}

// UpsertContact calls UpsertContactFunc.
func (mock *StorerMock) UpsertContact(ID string, update interface{}) error {
	if mock.UpsertContactFunc == nil {
		panic("StorerMock.UpsertContactFunc: method is nil but Storer.UpsertContact was just called")
	}
	callInfo := struct {
		ID     string
		Update interface{}
	}{
		ID:     ID,
		Update: update,
	}
	mock.lockUpsertContact.Lock()
	mock.calls.UpsertContact = append(mock.calls.UpsertContact, callInfo)
	mock.lockUpsertContact.Unlock()
	return mock.UpsertContactFunc(ID, update)
}

// UpsertContactCalls gets all the calls that were made to UpsertContact.
// Check the length with:
//     len(mockedStorer.UpsertContactCalls())
func (mock *StorerMock) UpsertContactCalls() []struct {
	ID     string
	Update interface{}
} {
	var calls []struct {
		ID     string
		Update interface{}
	}
	mock.lockUpsertContact.RLock()
	calls = mock.calls.UpsertContact
	mock.lockUpsertContact.RUnlock()
	return calls
}

// UpsertDataset calls UpsertDatasetFunc.
func (mock *StorerMock) UpsertDataset(ID string, datasetDoc *models.DatasetUpdate) error {
	if mock.UpsertDatasetFunc == nil {
		panic("StorerMock.UpsertDatasetFunc: method is nil but Storer.UpsertDataset was just called")
	}
	callInfo := struct {
		ID         string
		DatasetDoc *models.DatasetUpdate
	}{
		ID:         ID,
		DatasetDoc: datasetDoc,
	}
	mock.lockUpsertDataset.Lock()
	mock.calls.UpsertDataset = append(mock.calls.UpsertDataset, callInfo)
	mock.lockUpsertDataset.Unlock()
	return mock.UpsertDatasetFunc(ID, datasetDoc)
}

// UpsertDatasetCalls gets all the calls that were made to UpsertDataset.
// Check the length with:
//     len(mockedStorer.UpsertDatasetCalls())
func (mock *StorerMock) UpsertDatasetCalls() []struct {
	ID         string
	DatasetDoc *models.DatasetUpdate
} {
	var calls []struct {
		ID         string
		DatasetDoc *models.DatasetUpdate
	}
	mock.lockUpsertDataset.RLock()
	calls = mock.calls.UpsertDataset
	mock.lockUpsertDataset.RUnlock()
	return calls
}

// UpsertDimensionsToInstance calls UpsertDimensionsToInstanceFunc.
func (mock *StorerMock) UpsertDimensionsToInstance(dimensions []*models.CachedDimensionOption) error {
	if mock.UpsertDimensionsToInstanceFunc == nil {
		panic("StorerMock.UpsertDimensionsToInstanceFunc: method is nil but Storer.UpsertDimensionsToInstance was just called")
	}
	callInfo := struct {
		Dimensions []*models.CachedDimensionOption
	}{
		Dimensions: dimensions,
	}
	mock.lockUpsertDimensionsToInstance.Lock()
	mock.calls.UpsertDimensionsToInstance = append(mock.calls.UpsertDimensionsToInstance, callInfo)
	mock.lockUpsertDimensionsToInstance.Unlock()
	return mock.UpsertDimensionsToInstanceFunc(dimensions)
}

// UpsertDimensionsToInstanceCalls gets all the calls that were made to UpsertDimensionsToInstance.
// Check the length with:
//     len(mockedStorer.UpsertDimensionsToInstanceCalls())
func (mock *StorerMock) UpsertDimensionsToInstanceCalls() []struct {
	Dimensions []*models.CachedDimensionOption
} {
	var calls []struct {
		Dimensions []*models.CachedDimensionOption
	}
	mock.lockUpsertDimensionsToInstance.RLock()
	calls = mock.calls.UpsertDimensionsToInstance
	mock.lockUpsertDimensionsToInstance.RUnlock()
	return calls
}

// UpsertEdition calls UpsertEditionFunc.
func (mock *StorerMock) UpsertEdition(datasetID string, edition string, editionDoc *models.EditionUpdate) error {
	if mock.UpsertEditionFunc == nil {
		panic("StorerMock.UpsertEditionFunc: method is nil but Storer.UpsertEdition was just called")
	}
	callInfo := struct {
		DatasetID  string
		Edition    string
		EditionDoc *models.EditionUpdate
	}{
		DatasetID:  datasetID,
		Edition:    edition,
		EditionDoc: editionDoc,
	}
	mock.lockUpsertEdition.Lock()
	mock.calls.UpsertEdition = append(mock.calls.UpsertEdition, callInfo)
	mock.lockUpsertEdition.Unlock()
	return mock.UpsertEditionFunc(datasetID, edition, editionDoc)
}

// UpsertEditionCalls gets all the calls that were made to UpsertEdition.
// Check the length with:
//     len(mockedStorer.UpsertEditionCalls())
func (mock *StorerMock) UpsertEditionCalls() []struct {
	DatasetID  string
	Edition    string
	EditionDoc *models.EditionUpdate
} {
	var calls []struct {
		DatasetID  string
		Edition    string
		EditionDoc *models.EditionUpdate
	}
	mock.lockUpsertEdition.RLock()
	calls = mock.calls.UpsertEdition
	mock.lockUpsertEdition.RUnlock()
	return calls
}

// UpsertVersion calls UpsertVersionFunc.
func (mock *StorerMock) UpsertVersion(ID string, versionDoc *models.Version) error {
	if mock.UpsertVersionFunc == nil {
		panic("StorerMock.UpsertVersionFunc: method is nil but Storer.UpsertVersion was just called")
	}
	callInfo := struct {
		ID         string
		VersionDoc *models.Version
	}{
		ID:         ID,
		VersionDoc: versionDoc,
	}
	mock.lockUpsertVersion.Lock()
	mock.calls.UpsertVersion = append(mock.calls.UpsertVersion, callInfo)
	mock.lockUpsertVersion.Unlock()
	return mock.UpsertVersionFunc(ID, versionDoc)
}

// UpsertVersionCalls gets all the calls that were made to UpsertVersion.
// Check the length with:
//     len(mockedStorer.UpsertVersionCalls())
func (mock *StorerMock) UpsertVersionCalls() []struct {
	ID         string
	VersionDoc *models.Version
} {
	var calls []struct {
		ID         string
		VersionDoc *models.Version
	}
	mock.lockUpsertVersion.RLock()
	calls = mock.calls.UpsertVersion
	mock.lockUpsertVersion.RUnlock()
	return calls
}
