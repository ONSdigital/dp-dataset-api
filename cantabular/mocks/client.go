// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/ONSdigital/dp-dataset-api/cantabular"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"sync"
)

// Ensure, that ClientMock does implement cantabular.Client.
// If this is not the case, regenerate this file with moq.
var _ cantabular.Client = &ClientMock{}

// ClientMock is a mock implementation of cantabular.Client.
//
// 	func TestSomethingThatUsesClient(t *testing.T) {
//
// 		// make and configure a mocked cantabular.Client
// 		mockedClient := &ClientMock{
// 			CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			CheckerAPIExtFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
// 				panic("mock out the CheckerAPIExt method")
// 			},
// 			GetPopulationTypesFunc: func(ctx context.Context) ([]string, error) {
// 				panic("mock out the GetPopulationTypes method")
// 			},
// 		}
//
// 		// use mockedClient in code that requires cantabular.Client
// 		// and then make assertions.
//
// 	}
type ClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// CheckerAPIExtFunc mocks the CheckerAPIExt method.
	CheckerAPIExtFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// GetPopulationTypesFunc mocks the GetPopulationTypes method.
	GetPopulationTypesFunc func(ctx context.Context) ([]string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// CheckerAPIExt holds details about calls to the CheckerAPIExt method.
		CheckerAPIExt []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// GetPopulationTypes holds details about calls to the GetPopulationTypes method.
		GetPopulationTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockChecker            sync.RWMutex
	lockCheckerAPIExt      sync.RWMutex
	lockGetPopulationTypes sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *ClientMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("ClientMock.CheckerFunc: method is nil but Client.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedClient.CheckerCalls())
func (mock *ClientMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// CheckerAPIExt calls CheckerAPIExtFunc.
func (mock *ClientMock) CheckerAPIExt(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerAPIExtFunc == nil {
		panic("ClientMock.CheckerAPIExtFunc: method is nil but Client.CheckerAPIExt was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockCheckerAPIExt.Lock()
	mock.calls.CheckerAPIExt = append(mock.calls.CheckerAPIExt, callInfo)
	mock.lockCheckerAPIExt.Unlock()
	return mock.CheckerAPIExtFunc(ctx, state)
}

// CheckerAPIExtCalls gets all the calls that were made to CheckerAPIExt.
// Check the length with:
//     len(mockedClient.CheckerAPIExtCalls())
func (mock *ClientMock) CheckerAPIExtCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	mock.lockCheckerAPIExt.RLock()
	calls = mock.calls.CheckerAPIExt
	mock.lockCheckerAPIExt.RUnlock()
	return calls
}

// GetPopulationTypes calls GetPopulationTypesFunc.
func (mock *ClientMock) GetPopulationTypes(ctx context.Context) ([]string, error) {
	if mock.GetPopulationTypesFunc == nil {
		panic("ClientMock.GetPopulationTypesFunc: method is nil but Client.GetPopulationTypes was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetPopulationTypes.Lock()
	mock.calls.GetPopulationTypes = append(mock.calls.GetPopulationTypes, callInfo)
	mock.lockGetPopulationTypes.Unlock()
	return mock.GetPopulationTypesFunc(ctx)
}

// GetPopulationTypesCalls gets all the calls that were made to GetPopulationTypes.
// Check the length with:
//     len(mockedClient.GetPopulationTypesCalls())
func (mock *ClientMock) GetPopulationTypesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetPopulationTypes.RLock()
	calls = mock.calls.GetPopulationTypes
	mock.lockGetPopulationTypes.RUnlock()
	return calls
}
