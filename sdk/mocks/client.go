// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/v2/health"
	"github.com/ONSdigital/dp-dataset-api/models"
	"github.com/ONSdigital/dp-dataset-api/sdk"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"net/http"
	"net/url"
	"sync"
)

// Ensure, that ClienterMock does implement sdk.Clienter.
// If this is not the case, regenerate this file with moq.
var _ sdk.Clienter = &ClienterMock{}

// ClienterMock is a mock implementation of sdk.Clienter.
//
//	func TestSomethingThatUsesClienter(t *testing.T) {
//
//		// make and configure a mocked sdk.Clienter
//		mockedClienter := &ClienterMock{
//			CheckerFunc: func(ctx context.Context, check *healthcheck.CheckState) error {
//				panic("mock out the Checker method")
//			},
//			DoAuthenticatedGetRequestFunc: func(ctx context.Context, headers sdk.Headers, uri *url.URL) (*http.Response, error) {
//				panic("mock out the DoAuthenticatedGetRequest method")
//			},
//			GetDatasetFunc: func(ctx context.Context, headers sdk.Headers, collectionID string, datasetID string) (models.Dataset, error) {
//				panic("mock out the GetDataset method")
//			},
//			GetDatasetByPathFunc: func(ctx context.Context, headers sdk.Headers, path string) (models.Dataset, error) {
//				panic("mock out the GetDatasetByPath method")
//			},
//			GetDatasetEditionsFunc: func(ctx context.Context, headers sdk.Headers, queryParams *sdk.QueryParams) (sdk.DatasetEditionsList, error) {
//				panic("mock out the GetDatasetEditions method")
//			},
//			GetEditionFunc: func(ctx context.Context, headers sdk.Headers, datasetID string, editionID string) (models.Edition, error) {
//				panic("mock out the GetEdition method")
//			},
//			GetEditionsFunc: func(ctx context.Context, headers sdk.Headers, datasetID string, queryParams *sdk.QueryParams) (sdk.EditionsList, error) {
//				panic("mock out the GetEditions method")
//			},
//			GetVersionFunc: func(ctx context.Context, headers sdk.Headers, datasetID string, editionID string, versionID string) (models.Version, error) {
//				panic("mock out the GetVersion method")
//			},
//			GetVersionDimensionOptionsFunc: func(ctx context.Context, headers sdk.Headers, datasetID string, editionID string, versionID string, dimensionID string, queryParams *sdk.QueryParams) (sdk.VersionDimensionOptionsList, error) {
//				panic("mock out the GetVersionDimensionOptions method")
//			},
//			GetVersionDimensionsFunc: func(ctx context.Context, headers sdk.Headers, datasetID string, editionID string, versionID string) (sdk.VersionDimensionsList, error) {
//				panic("mock out the GetVersionDimensions method")
//			},
//			GetVersionMetadataFunc: func(ctx context.Context, headers sdk.Headers, datasetID string, editionID string, versionID string) (models.Metadata, error) {
//				panic("mock out the GetVersionMetadata method")
//			},
//			GetVersionsFunc: func(ctx context.Context, headers sdk.Headers, datasetID string, editionID string, queryParams *sdk.QueryParams) (sdk.VersionsList, error) {
//				panic("mock out the GetVersions method")
//			},
//			HealthFunc: func() *health.Client {
//				panic("mock out the Health method")
//			},
//			PutVersionStateFunc: func(ctx context.Context, headers sdk.Headers, datasetID string, editionID string, versionID string, state string) error {
//				panic("mock out the PutVersionState method")
//			},
//			URLFunc: func() string {
//				panic("mock out the URL method")
//			},
//		}
//
//		// use mockedClienter in code that requires sdk.Clienter
//		// and then make assertions.
//
//	}
type ClienterMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, check *healthcheck.CheckState) error

	// DoAuthenticatedGetRequestFunc mocks the DoAuthenticatedGetRequest method.
	DoAuthenticatedGetRequestFunc func(ctx context.Context, headers sdk.Headers, uri *url.URL) (*http.Response, error)

	// GetDatasetFunc mocks the GetDataset method.
	GetDatasetFunc func(ctx context.Context, headers sdk.Headers, collectionID string, datasetID string) (models.Dataset, error)

	// GetDatasetByPathFunc mocks the GetDatasetByPath method.
	GetDatasetByPathFunc func(ctx context.Context, headers sdk.Headers, path string) (models.Dataset, error)

	// GetDatasetEditionsFunc mocks the GetDatasetEditions method.
	GetDatasetEditionsFunc func(ctx context.Context, headers sdk.Headers, queryParams *sdk.QueryParams) (sdk.DatasetEditionsList, error)

	// GetEditionFunc mocks the GetEdition method.
	GetEditionFunc func(ctx context.Context, headers sdk.Headers, datasetID string, editionID string) (models.Edition, error)

	// GetEditionsFunc mocks the GetEditions method.
	GetEditionsFunc func(ctx context.Context, headers sdk.Headers, datasetID string, queryParams *sdk.QueryParams) (sdk.EditionsList, error)

	// GetVersionFunc mocks the GetVersion method.
	GetVersionFunc func(ctx context.Context, headers sdk.Headers, datasetID string, editionID string, versionID string) (models.Version, error)

	// GetVersionDimensionOptionsFunc mocks the GetVersionDimensionOptions method.
	GetVersionDimensionOptionsFunc func(ctx context.Context, headers sdk.Headers, datasetID string, editionID string, versionID string, dimensionID string, queryParams *sdk.QueryParams) (sdk.VersionDimensionOptionsList, error)

	// GetVersionDimensionsFunc mocks the GetVersionDimensions method.
	GetVersionDimensionsFunc func(ctx context.Context, headers sdk.Headers, datasetID string, editionID string, versionID string) (sdk.VersionDimensionsList, error)

	// GetVersionMetadataFunc mocks the GetVersionMetadata method.
	GetVersionMetadataFunc func(ctx context.Context, headers sdk.Headers, datasetID string, editionID string, versionID string) (models.Metadata, error)

	// GetVersionsFunc mocks the GetVersions method.
	GetVersionsFunc func(ctx context.Context, headers sdk.Headers, datasetID string, editionID string, queryParams *sdk.QueryParams) (sdk.VersionsList, error)

	// HealthFunc mocks the Health method.
	HealthFunc func() *health.Client

	// PutVersionStateFunc mocks the PutVersionState method.
	PutVersionStateFunc func(ctx context.Context, headers sdk.Headers, datasetID string, editionID string, versionID string, state string) error

	// URLFunc mocks the URL method.
	URLFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Check is the check argument value.
			Check *healthcheck.CheckState
		}
		// DoAuthenticatedGetRequest holds details about calls to the DoAuthenticatedGetRequest method.
		DoAuthenticatedGetRequest []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Headers is the headers argument value.
			Headers sdk.Headers
			// URI is the uri argument value.
			URI *url.URL
		}
		// GetDataset holds details about calls to the GetDataset method.
		GetDataset []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Headers is the headers argument value.
			Headers sdk.Headers
			// CollectionID is the collectionID argument value.
			CollectionID string
			// DatasetID is the datasetID argument value.
			DatasetID string
		}
		// GetDatasetByPath holds details about calls to the GetDatasetByPath method.
		GetDatasetByPath []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Headers is the headers argument value.
			Headers sdk.Headers
			// Path is the path argument value.
			Path string
		}
		// GetDatasetEditions holds details about calls to the GetDatasetEditions method.
		GetDatasetEditions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Headers is the headers argument value.
			Headers sdk.Headers
			// QueryParams is the queryParams argument value.
			QueryParams *sdk.QueryParams
		}
		// GetEdition holds details about calls to the GetEdition method.
		GetEdition []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Headers is the headers argument value.
			Headers sdk.Headers
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
		}
		// GetEditions holds details about calls to the GetEditions method.
		GetEditions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Headers is the headers argument value.
			Headers sdk.Headers
			// DatasetID is the datasetID argument value.
			DatasetID string
			// QueryParams is the queryParams argument value.
			QueryParams *sdk.QueryParams
		}
		// GetVersion holds details about calls to the GetVersion method.
		GetVersion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Headers is the headers argument value.
			Headers sdk.Headers
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
			// VersionID is the versionID argument value.
			VersionID string
		}
		// GetVersionDimensionOptions holds details about calls to the GetVersionDimensionOptions method.
		GetVersionDimensionOptions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Headers is the headers argument value.
			Headers sdk.Headers
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
			// VersionID is the versionID argument value.
			VersionID string
			// DimensionID is the dimensionID argument value.
			DimensionID string
			// QueryParams is the queryParams argument value.
			QueryParams *sdk.QueryParams
		}
		// GetVersionDimensions holds details about calls to the GetVersionDimensions method.
		GetVersionDimensions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Headers is the headers argument value.
			Headers sdk.Headers
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
			// VersionID is the versionID argument value.
			VersionID string
		}
		// GetVersionMetadata holds details about calls to the GetVersionMetadata method.
		GetVersionMetadata []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Headers is the headers argument value.
			Headers sdk.Headers
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
			// VersionID is the versionID argument value.
			VersionID string
		}
		// GetVersions holds details about calls to the GetVersions method.
		GetVersions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Headers is the headers argument value.
			Headers sdk.Headers
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
			// QueryParams is the queryParams argument value.
			QueryParams *sdk.QueryParams
		}
		// Health holds details about calls to the Health method.
		Health []struct {
		}
		// PutVersionState holds details about calls to the PutVersionState method.
		PutVersionState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Headers is the headers argument value.
			Headers sdk.Headers
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
			// VersionID is the versionID argument value.
			VersionID string
			// State is the state argument value.
			State string
		}
		// URL holds details about calls to the URL method.
		URL []struct {
		}
	}
	lockChecker                    sync.RWMutex
	lockDoAuthenticatedGetRequest  sync.RWMutex
	lockGetDataset                 sync.RWMutex
	lockGetDatasetByPath           sync.RWMutex
	lockGetDatasetEditions         sync.RWMutex
	lockGetEdition                 sync.RWMutex
	lockGetEditions                sync.RWMutex
	lockGetVersion                 sync.RWMutex
	lockGetVersionDimensionOptions sync.RWMutex
	lockGetVersionDimensions       sync.RWMutex
	lockGetVersionMetadata         sync.RWMutex
	lockGetVersions                sync.RWMutex
	lockHealth                     sync.RWMutex
	lockPutVersionState            sync.RWMutex
	lockURL                        sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *ClienterMock) Checker(ctx context.Context, check *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("ClienterMock.CheckerFunc: method is nil but Clienter.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Check *healthcheck.CheckState
	}{
		Ctx:   ctx,
		Check: check,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, check)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//
//	len(mockedClienter.CheckerCalls())
func (mock *ClienterMock) CheckerCalls() []struct {
	Ctx   context.Context
	Check *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		Check *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// DoAuthenticatedGetRequest calls DoAuthenticatedGetRequestFunc.
func (mock *ClienterMock) DoAuthenticatedGetRequest(ctx context.Context, headers sdk.Headers, uri *url.URL) (*http.Response, error) {
	if mock.DoAuthenticatedGetRequestFunc == nil {
		panic("ClienterMock.DoAuthenticatedGetRequestFunc: method is nil but Clienter.DoAuthenticatedGetRequest was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Headers sdk.Headers
		URI     *url.URL
	}{
		Ctx:     ctx,
		Headers: headers,
		URI:     uri,
	}
	mock.lockDoAuthenticatedGetRequest.Lock()
	mock.calls.DoAuthenticatedGetRequest = append(mock.calls.DoAuthenticatedGetRequest, callInfo)
	mock.lockDoAuthenticatedGetRequest.Unlock()
	return mock.DoAuthenticatedGetRequestFunc(ctx, headers, uri)
}

// DoAuthenticatedGetRequestCalls gets all the calls that were made to DoAuthenticatedGetRequest.
// Check the length with:
//
//	len(mockedClienter.DoAuthenticatedGetRequestCalls())
func (mock *ClienterMock) DoAuthenticatedGetRequestCalls() []struct {
	Ctx     context.Context
	Headers sdk.Headers
	URI     *url.URL
} {
	var calls []struct {
		Ctx     context.Context
		Headers sdk.Headers
		URI     *url.URL
	}
	mock.lockDoAuthenticatedGetRequest.RLock()
	calls = mock.calls.DoAuthenticatedGetRequest
	mock.lockDoAuthenticatedGetRequest.RUnlock()
	return calls
}

// GetDataset calls GetDatasetFunc.
func (mock *ClienterMock) GetDataset(ctx context.Context, headers sdk.Headers, collectionID string, datasetID string) (models.Dataset, error) {
	if mock.GetDatasetFunc == nil {
		panic("ClienterMock.GetDatasetFunc: method is nil but Clienter.GetDataset was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Headers      sdk.Headers
		CollectionID string
		DatasetID    string
	}{
		Ctx:          ctx,
		Headers:      headers,
		CollectionID: collectionID,
		DatasetID:    datasetID,
	}
	mock.lockGetDataset.Lock()
	mock.calls.GetDataset = append(mock.calls.GetDataset, callInfo)
	mock.lockGetDataset.Unlock()
	return mock.GetDatasetFunc(ctx, headers, collectionID, datasetID)
}

// GetDatasetCalls gets all the calls that were made to GetDataset.
// Check the length with:
//
//	len(mockedClienter.GetDatasetCalls())
func (mock *ClienterMock) GetDatasetCalls() []struct {
	Ctx          context.Context
	Headers      sdk.Headers
	CollectionID string
	DatasetID    string
} {
	var calls []struct {
		Ctx          context.Context
		Headers      sdk.Headers
		CollectionID string
		DatasetID    string
	}
	mock.lockGetDataset.RLock()
	calls = mock.calls.GetDataset
	mock.lockGetDataset.RUnlock()
	return calls
}

// GetDatasetByPath calls GetDatasetByPathFunc.
func (mock *ClienterMock) GetDatasetByPath(ctx context.Context, headers sdk.Headers, path string) (models.Dataset, error) {
	if mock.GetDatasetByPathFunc == nil {
		panic("ClienterMock.GetDatasetByPathFunc: method is nil but Clienter.GetDatasetByPath was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Headers sdk.Headers
		Path    string
	}{
		Ctx:     ctx,
		Headers: headers,
		Path:    path,
	}
	mock.lockGetDatasetByPath.Lock()
	mock.calls.GetDatasetByPath = append(mock.calls.GetDatasetByPath, callInfo)
	mock.lockGetDatasetByPath.Unlock()
	return mock.GetDatasetByPathFunc(ctx, headers, path)
}

// GetDatasetByPathCalls gets all the calls that were made to GetDatasetByPath.
// Check the length with:
//
//	len(mockedClienter.GetDatasetByPathCalls())
func (mock *ClienterMock) GetDatasetByPathCalls() []struct {
	Ctx     context.Context
	Headers sdk.Headers
	Path    string
} {
	var calls []struct {
		Ctx     context.Context
		Headers sdk.Headers
		Path    string
	}
	mock.lockGetDatasetByPath.RLock()
	calls = mock.calls.GetDatasetByPath
	mock.lockGetDatasetByPath.RUnlock()
	return calls
}

// GetDatasetEditions calls GetDatasetEditionsFunc.
func (mock *ClienterMock) GetDatasetEditions(ctx context.Context, headers sdk.Headers, queryParams *sdk.QueryParams) (sdk.DatasetEditionsList, error) {
	if mock.GetDatasetEditionsFunc == nil {
		panic("ClienterMock.GetDatasetEditionsFunc: method is nil but Clienter.GetDatasetEditions was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Headers     sdk.Headers
		QueryParams *sdk.QueryParams
	}{
		Ctx:         ctx,
		Headers:     headers,
		QueryParams: queryParams,
	}
	mock.lockGetDatasetEditions.Lock()
	mock.calls.GetDatasetEditions = append(mock.calls.GetDatasetEditions, callInfo)
	mock.lockGetDatasetEditions.Unlock()
	return mock.GetDatasetEditionsFunc(ctx, headers, queryParams)
}

// GetDatasetEditionsCalls gets all the calls that were made to GetDatasetEditions.
// Check the length with:
//
//	len(mockedClienter.GetDatasetEditionsCalls())
func (mock *ClienterMock) GetDatasetEditionsCalls() []struct {
	Ctx         context.Context
	Headers     sdk.Headers
	QueryParams *sdk.QueryParams
} {
	var calls []struct {
		Ctx         context.Context
		Headers     sdk.Headers
		QueryParams *sdk.QueryParams
	}
	mock.lockGetDatasetEditions.RLock()
	calls = mock.calls.GetDatasetEditions
	mock.lockGetDatasetEditions.RUnlock()
	return calls
}

// GetEdition calls GetEditionFunc.
func (mock *ClienterMock) GetEdition(ctx context.Context, headers sdk.Headers, datasetID string, editionID string) (models.Edition, error) {
	if mock.GetEditionFunc == nil {
		panic("ClienterMock.GetEditionFunc: method is nil but Clienter.GetEdition was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Headers   sdk.Headers
		DatasetID string
		EditionID string
	}{
		Ctx:       ctx,
		Headers:   headers,
		DatasetID: datasetID,
		EditionID: editionID,
	}
	mock.lockGetEdition.Lock()
	mock.calls.GetEdition = append(mock.calls.GetEdition, callInfo)
	mock.lockGetEdition.Unlock()
	return mock.GetEditionFunc(ctx, headers, datasetID, editionID)
}

// GetEditionCalls gets all the calls that were made to GetEdition.
// Check the length with:
//
//	len(mockedClienter.GetEditionCalls())
func (mock *ClienterMock) GetEditionCalls() []struct {
	Ctx       context.Context
	Headers   sdk.Headers
	DatasetID string
	EditionID string
} {
	var calls []struct {
		Ctx       context.Context
		Headers   sdk.Headers
		DatasetID string
		EditionID string
	}
	mock.lockGetEdition.RLock()
	calls = mock.calls.GetEdition
	mock.lockGetEdition.RUnlock()
	return calls
}

// GetEditions calls GetEditionsFunc.
func (mock *ClienterMock) GetEditions(ctx context.Context, headers sdk.Headers, datasetID string, queryParams *sdk.QueryParams) (sdk.EditionsList, error) {
	if mock.GetEditionsFunc == nil {
		panic("ClienterMock.GetEditionsFunc: method is nil but Clienter.GetEditions was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Headers     sdk.Headers
		DatasetID   string
		QueryParams *sdk.QueryParams
	}{
		Ctx:         ctx,
		Headers:     headers,
		DatasetID:   datasetID,
		QueryParams: queryParams,
	}
	mock.lockGetEditions.Lock()
	mock.calls.GetEditions = append(mock.calls.GetEditions, callInfo)
	mock.lockGetEditions.Unlock()
	return mock.GetEditionsFunc(ctx, headers, datasetID, queryParams)
}

// GetEditionsCalls gets all the calls that were made to GetEditions.
// Check the length with:
//
//	len(mockedClienter.GetEditionsCalls())
func (mock *ClienterMock) GetEditionsCalls() []struct {
	Ctx         context.Context
	Headers     sdk.Headers
	DatasetID   string
	QueryParams *sdk.QueryParams
} {
	var calls []struct {
		Ctx         context.Context
		Headers     sdk.Headers
		DatasetID   string
		QueryParams *sdk.QueryParams
	}
	mock.lockGetEditions.RLock()
	calls = mock.calls.GetEditions
	mock.lockGetEditions.RUnlock()
	return calls
}

// GetVersion calls GetVersionFunc.
func (mock *ClienterMock) GetVersion(ctx context.Context, headers sdk.Headers, datasetID string, editionID string, versionID string) (models.Version, error) {
	if mock.GetVersionFunc == nil {
		panic("ClienterMock.GetVersionFunc: method is nil but Clienter.GetVersion was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Headers   sdk.Headers
		DatasetID string
		EditionID string
		VersionID string
	}{
		Ctx:       ctx,
		Headers:   headers,
		DatasetID: datasetID,
		EditionID: editionID,
		VersionID: versionID,
	}
	mock.lockGetVersion.Lock()
	mock.calls.GetVersion = append(mock.calls.GetVersion, callInfo)
	mock.lockGetVersion.Unlock()
	return mock.GetVersionFunc(ctx, headers, datasetID, editionID, versionID)
}

// GetVersionCalls gets all the calls that were made to GetVersion.
// Check the length with:
//
//	len(mockedClienter.GetVersionCalls())
func (mock *ClienterMock) GetVersionCalls() []struct {
	Ctx       context.Context
	Headers   sdk.Headers
	DatasetID string
	EditionID string
	VersionID string
} {
	var calls []struct {
		Ctx       context.Context
		Headers   sdk.Headers
		DatasetID string
		EditionID string
		VersionID string
	}
	mock.lockGetVersion.RLock()
	calls = mock.calls.GetVersion
	mock.lockGetVersion.RUnlock()
	return calls
}

// GetVersionDimensionOptions calls GetVersionDimensionOptionsFunc.
func (mock *ClienterMock) GetVersionDimensionOptions(ctx context.Context, headers sdk.Headers, datasetID string, editionID string, versionID string, dimensionID string, queryParams *sdk.QueryParams) (sdk.VersionDimensionOptionsList, error) {
	if mock.GetVersionDimensionOptionsFunc == nil {
		panic("ClienterMock.GetVersionDimensionOptionsFunc: method is nil but Clienter.GetVersionDimensionOptions was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Headers     sdk.Headers
		DatasetID   string
		EditionID   string
		VersionID   string
		DimensionID string
		QueryParams *sdk.QueryParams
	}{
		Ctx:         ctx,
		Headers:     headers,
		DatasetID:   datasetID,
		EditionID:   editionID,
		VersionID:   versionID,
		DimensionID: dimensionID,
		QueryParams: queryParams,
	}
	mock.lockGetVersionDimensionOptions.Lock()
	mock.calls.GetVersionDimensionOptions = append(mock.calls.GetVersionDimensionOptions, callInfo)
	mock.lockGetVersionDimensionOptions.Unlock()
	return mock.GetVersionDimensionOptionsFunc(ctx, headers, datasetID, editionID, versionID, dimensionID, queryParams)
}

// GetVersionDimensionOptionsCalls gets all the calls that were made to GetVersionDimensionOptions.
// Check the length with:
//
//	len(mockedClienter.GetVersionDimensionOptionsCalls())
func (mock *ClienterMock) GetVersionDimensionOptionsCalls() []struct {
	Ctx         context.Context
	Headers     sdk.Headers
	DatasetID   string
	EditionID   string
	VersionID   string
	DimensionID string
	QueryParams *sdk.QueryParams
} {
	var calls []struct {
		Ctx         context.Context
		Headers     sdk.Headers
		DatasetID   string
		EditionID   string
		VersionID   string
		DimensionID string
		QueryParams *sdk.QueryParams
	}
	mock.lockGetVersionDimensionOptions.RLock()
	calls = mock.calls.GetVersionDimensionOptions
	mock.lockGetVersionDimensionOptions.RUnlock()
	return calls
}

// GetVersionDimensions calls GetVersionDimensionsFunc.
func (mock *ClienterMock) GetVersionDimensions(ctx context.Context, headers sdk.Headers, datasetID string, editionID string, versionID string) (sdk.VersionDimensionsList, error) {
	if mock.GetVersionDimensionsFunc == nil {
		panic("ClienterMock.GetVersionDimensionsFunc: method is nil but Clienter.GetVersionDimensions was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Headers   sdk.Headers
		DatasetID string
		EditionID string
		VersionID string
	}{
		Ctx:       ctx,
		Headers:   headers,
		DatasetID: datasetID,
		EditionID: editionID,
		VersionID: versionID,
	}
	mock.lockGetVersionDimensions.Lock()
	mock.calls.GetVersionDimensions = append(mock.calls.GetVersionDimensions, callInfo)
	mock.lockGetVersionDimensions.Unlock()
	return mock.GetVersionDimensionsFunc(ctx, headers, datasetID, editionID, versionID)
}

// GetVersionDimensionsCalls gets all the calls that were made to GetVersionDimensions.
// Check the length with:
//
//	len(mockedClienter.GetVersionDimensionsCalls())
func (mock *ClienterMock) GetVersionDimensionsCalls() []struct {
	Ctx       context.Context
	Headers   sdk.Headers
	DatasetID string
	EditionID string
	VersionID string
} {
	var calls []struct {
		Ctx       context.Context
		Headers   sdk.Headers
		DatasetID string
		EditionID string
		VersionID string
	}
	mock.lockGetVersionDimensions.RLock()
	calls = mock.calls.GetVersionDimensions
	mock.lockGetVersionDimensions.RUnlock()
	return calls
}

// GetVersionMetadata calls GetVersionMetadataFunc.
func (mock *ClienterMock) GetVersionMetadata(ctx context.Context, headers sdk.Headers, datasetID string, editionID string, versionID string) (models.Metadata, error) {
	if mock.GetVersionMetadataFunc == nil {
		panic("ClienterMock.GetVersionMetadataFunc: method is nil but Clienter.GetVersionMetadata was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Headers   sdk.Headers
		DatasetID string
		EditionID string
		VersionID string
	}{
		Ctx:       ctx,
		Headers:   headers,
		DatasetID: datasetID,
		EditionID: editionID,
		VersionID: versionID,
	}
	mock.lockGetVersionMetadata.Lock()
	mock.calls.GetVersionMetadata = append(mock.calls.GetVersionMetadata, callInfo)
	mock.lockGetVersionMetadata.Unlock()
	return mock.GetVersionMetadataFunc(ctx, headers, datasetID, editionID, versionID)
}

// GetVersionMetadataCalls gets all the calls that were made to GetVersionMetadata.
// Check the length with:
//
//	len(mockedClienter.GetVersionMetadataCalls())
func (mock *ClienterMock) GetVersionMetadataCalls() []struct {
	Ctx       context.Context
	Headers   sdk.Headers
	DatasetID string
	EditionID string
	VersionID string
} {
	var calls []struct {
		Ctx       context.Context
		Headers   sdk.Headers
		DatasetID string
		EditionID string
		VersionID string
	}
	mock.lockGetVersionMetadata.RLock()
	calls = mock.calls.GetVersionMetadata
	mock.lockGetVersionMetadata.RUnlock()
	return calls
}

// GetVersions calls GetVersionsFunc.
func (mock *ClienterMock) GetVersions(ctx context.Context, headers sdk.Headers, datasetID string, editionID string, queryParams *sdk.QueryParams) (sdk.VersionsList, error) {
	if mock.GetVersionsFunc == nil {
		panic("ClienterMock.GetVersionsFunc: method is nil but Clienter.GetVersions was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Headers     sdk.Headers
		DatasetID   string
		EditionID   string
		QueryParams *sdk.QueryParams
	}{
		Ctx:         ctx,
		Headers:     headers,
		DatasetID:   datasetID,
		EditionID:   editionID,
		QueryParams: queryParams,
	}
	mock.lockGetVersions.Lock()
	mock.calls.GetVersions = append(mock.calls.GetVersions, callInfo)
	mock.lockGetVersions.Unlock()
	return mock.GetVersionsFunc(ctx, headers, datasetID, editionID, queryParams)
}

// GetVersionsCalls gets all the calls that were made to GetVersions.
// Check the length with:
//
//	len(mockedClienter.GetVersionsCalls())
func (mock *ClienterMock) GetVersionsCalls() []struct {
	Ctx         context.Context
	Headers     sdk.Headers
	DatasetID   string
	EditionID   string
	QueryParams *sdk.QueryParams
} {
	var calls []struct {
		Ctx         context.Context
		Headers     sdk.Headers
		DatasetID   string
		EditionID   string
		QueryParams *sdk.QueryParams
	}
	mock.lockGetVersions.RLock()
	calls = mock.calls.GetVersions
	mock.lockGetVersions.RUnlock()
	return calls
}

// Health calls HealthFunc.
func (mock *ClienterMock) Health() *health.Client {
	if mock.HealthFunc == nil {
		panic("ClienterMock.HealthFunc: method is nil but Clienter.Health was just called")
	}
	callInfo := struct {
	}{}
	mock.lockHealth.Lock()
	mock.calls.Health = append(mock.calls.Health, callInfo)
	mock.lockHealth.Unlock()
	return mock.HealthFunc()
}

// HealthCalls gets all the calls that were made to Health.
// Check the length with:
//
//	len(mockedClienter.HealthCalls())
func (mock *ClienterMock) HealthCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHealth.RLock()
	calls = mock.calls.Health
	mock.lockHealth.RUnlock()
	return calls
}

// PutVersionState calls PutVersionStateFunc.
func (mock *ClienterMock) PutVersionState(ctx context.Context, headers sdk.Headers, datasetID string, editionID string, versionID string, state string) error {
	if mock.PutVersionStateFunc == nil {
		panic("ClienterMock.PutVersionStateFunc: method is nil but Clienter.PutVersionState was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Headers   sdk.Headers
		DatasetID string
		EditionID string
		VersionID string
		State     string
	}{
		Ctx:       ctx,
		Headers:   headers,
		DatasetID: datasetID,
		EditionID: editionID,
		VersionID: versionID,
		State:     state,
	}
	mock.lockPutVersionState.Lock()
	mock.calls.PutVersionState = append(mock.calls.PutVersionState, callInfo)
	mock.lockPutVersionState.Unlock()
	return mock.PutVersionStateFunc(ctx, headers, datasetID, editionID, versionID, state)
}

// PutVersionStateCalls gets all the calls that were made to PutVersionState.
// Check the length with:
//
//	len(mockedClienter.PutVersionStateCalls())
func (mock *ClienterMock) PutVersionStateCalls() []struct {
	Ctx       context.Context
	Headers   sdk.Headers
	DatasetID string
	EditionID string
	VersionID string
	State     string
} {
	var calls []struct {
		Ctx       context.Context
		Headers   sdk.Headers
		DatasetID string
		EditionID string
		VersionID string
		State     string
	}
	mock.lockPutVersionState.RLock()
	calls = mock.calls.PutVersionState
	mock.lockPutVersionState.RUnlock()
	return calls
}

// URL calls URLFunc.
func (mock *ClienterMock) URL() string {
	if mock.URLFunc == nil {
		panic("ClienterMock.URLFunc: method is nil but Clienter.URL was just called")
	}
	callInfo := struct {
	}{}
	mock.lockURL.Lock()
	mock.calls.URL = append(mock.calls.URL, callInfo)
	mock.lockURL.Unlock()
	return mock.URLFunc()
}

// URLCalls gets all the calls that were made to URL.
// Check the length with:
//
//	len(mockedClienter.URLCalls())
func (mock *ClienterMock) URLCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockURL.RLock()
	calls = mock.calls.URL
	mock.lockURL.RUnlock()
	return calls
}
